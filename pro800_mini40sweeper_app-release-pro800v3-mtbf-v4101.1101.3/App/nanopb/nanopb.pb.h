/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.6 at Tue Oct 25 15:14:41 2016. */

#ifndef PB_SIMPLE_PB_H_INCLUDED
#define PB_SIMPLE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _CommandMessage {
    uint32_t id;
    int32_t speed;
    int32_t angle;
    uint32_t cmd;
/* @@protoc_insertion_point(struct:CommandMessage) */
} CommandMessage;

typedef struct _HeaderMessage {
    uint32_t id;
/* @@protoc_insertion_point(struct:HeaderMessage) */
} HeaderMessage;

typedef struct _SafeDataMessage {
    uint32_t id;
    uint32_t ultrasonic0_3;
    uint32_t ultrasonic4_7;
    uint32_t ultrasonic8_11;
    uint32_t ultrasonic12_15;
/* @@protoc_insertion_point(struct:SafeDataMessage) */
} SafeDataMessage;

typedef struct _SpeedDataMessage {
    uint32_t id;
    uint32_t L_cnt;
    uint32_t R_cnt;
    int32_t L_delta_cnt;
    int32_t R_delta_cnt;
    int32_t speed;
    int32_t angle;
/* @@protoc_insertion_point(struct:SpeedDataMessage) */
} SpeedDataMessage;

typedef struct _StatusDataMessage {
    uint32_t id;
    uint32_t hd_status;
    uint32_t battery;
    uint32_t charger;
/* @@protoc_insertion_point(struct:StatusDataMessage) */
} StatusDataMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define HeaderMessage_init_default               {0}
#define CommandMessage_init_default              {0, 0, 0, 0}
#define SpeedDataMessage_init_default            {0, 0, 0, 0, 0, 0, 0}
#define StatusDataMessage_init_default           {0, 0, 0, 0}
#define SafeDataMessage_init_default             {0, 0, 0, 0, 0}
#define HeaderMessage_init_zero                  {0}
#define CommandMessage_init_zero                 {0, 0, 0, 0}
#define SpeedDataMessage_init_zero               {0, 0, 0, 0, 0, 0, 0}
#define StatusDataMessage_init_zero              {0, 0, 0, 0}
#define SafeDataMessage_init_zero                {0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define CommandMessage_id_tag                    1
#define CommandMessage_speed_tag                 2
#define CommandMessage_angle_tag                 3
#define CommandMessage_cmd_tag                   4
#define HeaderMessage_id_tag                     1
#define SafeDataMessage_id_tag                   1
#define SafeDataMessage_ultrasonic0_3_tag        2
#define SafeDataMessage_ultrasonic4_7_tag        3
#define SafeDataMessage_ultrasonic8_11_tag       4
#define SafeDataMessage_ultrasonic12_15_tag      5
#define SpeedDataMessage_id_tag                  1
#define SpeedDataMessage_L_cnt_tag               2
#define SpeedDataMessage_R_cnt_tag               3
#define SpeedDataMessage_L_delta_cnt_tag         4
#define SpeedDataMessage_R_delta_cnt_tag         5
#define SpeedDataMessage_speed_tag               6
#define SpeedDataMessage_angle_tag               7
#define StatusDataMessage_id_tag                 1
#define StatusDataMessage_hd_status_tag          2
#define StatusDataMessage_battery_tag            3
#define StatusDataMessage_charger_tag            4

/* Struct field encoding specification for nanopb */
extern const pb_field_t HeaderMessage_fields[2];
extern const pb_field_t CommandMessage_fields[5];
extern const pb_field_t SpeedDataMessage_fields[8];
extern const pb_field_t StatusDataMessage_fields[5];
extern const pb_field_t SafeDataMessage_fields[6];

/* Maximum encoded size of messages (where known) */
#define HeaderMessage_size                       6
#define CommandMessage_size                      34
#define SpeedDataMessage_size                    62
#define StatusDataMessage_size                   24
#define SafeDataMessage_size                     30

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SIMPLE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
