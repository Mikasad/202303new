#ifndef __PUBLIC_GLOBAL_H__
#define __PUBLIC_GLOBAL_H__

#include "mc_config.h"

//todo: The following code should be imporved... 20190911 

/*--------------------------------¡À?¨¢?¨¤¨¤D¨ª¨¦¨´?¡Â----------------------------------*/
typedef int32_t  s32;
typedef int16_t s16;
typedef int8_t  s8;

typedef const int32_t sc32;  /*!< Read Only */
typedef const int16_t sc16;  /*!< Read Only */
typedef const int8_t sc8;   /*!< Read Only */

typedef __IO int32_t  vs32;
typedef __IO int16_t  vs16;
typedef __IO int8_t   vs8;

typedef __I int32_t vsc32;  /*!< Read Only */
typedef __I int16_t vsc16;  /*!< Read Only */
typedef __I int8_t vsc8;   /*!< Read Only */

typedef uint32_t  u32;
typedef uint16_t u16;
typedef uint8_t  u8;

typedef const uint32_t uc32;  /*!< Read Only */
typedef const uint16_t uc16;  /*!< Read Only */
typedef const uint8_t uc8;   /*!< Read Only */

typedef __IO uint32_t  vu32;
typedef __IO uint16_t vu16;
typedef __IO uint8_t  vu8;

typedef __I uint32_t vuc32;  /*!< Read Only */
typedef __I uint16_t vuc16;  /*!< Read Only */
typedef __I uint8_t vuc8;   /*!< Read Only */


typedef unsigned char       Uint8;
typedef int             	int16;
typedef long            	int32;
typedef long long					int64;
typedef unsigned int    	Uint16;
typedef unsigned long   	Uint32;
typedef unsigned long long	Uint64;
typedef float           	float32;
typedef long double     	float64;


///*-----------------------------------o¨º?¡§¨°?-------------------------------------*/
///*-----------¨ª¡§??D-¨°¨¦o¨º?¡§¨°?-------------*/
//#define ATLAS_IWM_AGREEMENT  0
//#define MAXON_AGREEMENT      1
//#define MAXON_ERRALL         0

//#define MaxonPara_num        23
///*-----------ADCo¨º?¡§¨°?-------------*/
//#define ADC_Init_N        16    //ADC¨¦?¦Ì?????2¨¦?¡¥¡ä?¨ºy
//#define ADC_Channel_cnt   3	    //ADC¨ª¡§¦Ì¨¤¨ºy  
//#define Tim3_GetCapture  (OverflowCount*(CNT_MAX+1)) + __HAL_TIM_GET_COUNTER(&htimx_Encoder)//?¡§¨º¡À?¡Â32???¦Ì¡À?¡ã??¨ºy?¡Â?¦Ì
//#define Current_Sampling_1   1 //¦Ì?¨¢¡Â2¨¦?¨´¡¤?¡ã?1               
//#define Current_Sampling_2   0 //¦Ì?¨¢¡Â2¨¦?¨´¡¤?¡ã?2
//#define Regular_channel_DMA   1 //1??¨°¨ª¡§¦Ì¨¤DMA???¡¥
///*-----------?¨´?¨¨/????¡À??¡¥?¡Â¨º?????o¨º?¡§¨°?-------------*/
//#define ICx_Filter  				8           //2?????2¡§?¦Ì¨ºy
//#define FILTER_N   					20          //??2¡§?¦Ì¨ºy
#define FILTER_Tale  				256        	//?¨´?¨¨??2¡§¨¨¡§?¦Ì
#define Add_threshold_1 		30      		//??2¡§?¦Ì¨ºy???¨´?D?¦Ì
#define Add_threshold_2 		30     		 	//??2¡§?¦Ì¨ºy???¨´?D?¦Ì
#define ADC_AMPER_Ratio  0.79435   //1.19152
#define A_AXIS							0
///*-----------FOCo¨º?¡§¨°?-------------*/
////#define  Ts       					8399  			 //Period us
////#define  Np    								2            //????¨ºy
//#define  Count 								4000         //¡À¨¤???¡Â??¨ºy[??¡À?]      //TODO¡êo Conut¡À?¨¢???D??¡§¨°?¡ê?¨®?¡À?¨¢?¡ä¨²¨¬?o¨º?¡§¨°?¡ê?¨ª??1
//#define  Rotation_Number      10000   		 //TIM3¡À¨¤???¡Â?¡ê¨º?¨°?3?¡ä?¨ºy?T??

//#define  CaptureNumber_Limit  Rotation_Number*Count

///*--------???¡ê2?¨ºyo¨º?¡§¨°?--------*/
//#define  B_SMC 0.0000067f	//0
//#define  J_SMC 0.000021f		//0.0000512 
//#define  TL    0
//#define  phif  0.018		//0.0187
//#define  period 0.001 
///*------------?????¡Âo¨º?¡§¨°?------------*/ 
//#define Position_PID_Handler      10
//#define Speed_PID_Handler         20
//#define Flux_PID_Handler          30
//#define Torque_PID_Handler        40
///*------------3?¨º¡Ào¡¥¨ºy??¡À¨²?¡§¨°?------------*/ 
//#define ERROR_NUM         2     //3?¨º¡À¡ä¨ª?¨®?¨¬2ao¡¥¨ºy¨ºy¨¢?
//#define Timeout_release   0     //Time out ¨º¨ª¡¤?


//#define SECTOR_1	(u32)1
//#define SECTOR_2	(u32)2
//#define SECTOR_3	(u32)3
//#define SECTOR_4	(u32)4
//#define SECTOR_5	(u32)5
//#define SECTOR_6	(u32)6

//#define PWM_FREQUENCY                    10000
//#define SYSCLK_FREQ      168000000uL
//#define TIM_CLOCK_DIVIDER  1
//#define TIMAUX_CLOCK_DIVIDER (TIM_CLOCK_DIVIDER)
//#define ADV_TIM_CLK_MHz  168/TIM_CLOCK_DIVIDER
//#define ADC_CLK_MHz     21
//#define HALL_TIM_CLK    84000000uL
//#define PWM_PERIOD_CYCLES (uint16_t)(ADV_TIM_CLK_MHz*\
//                                      (unsigned long long)1000000u/((uint16_t)(PWM_FREQUENCY)))


//#define SQRT_3		1.732051
//#define hT		    (PWM_PERIOD_CYCLES * 1)
//#define T_SQRT3     (u16)(hT * SQRT_3*2)

/*--------???¡ê2?¨ºyo¨º?¡§¨°?--------*/
#define  B_SMC 0.0000067f	//0
#define  J_SMC 0.000021f		//0.0000512 
#define  TL    0
#define  phif  0.018		//0.0187
#define  period 0.001f 
///*------------?????¡Âo¨º?¡§¨°?------------*/ 
//#define Position_PID_Handler      10
//#define Speed_PID_Handler         20
//#define Flux_PID_Handler          30
//#define Torque_PID_Handler        40
///*------------3?¨º¡Ào¡¥¨ºy??¡À¨²?¡§¨°?------------*/ 
#define ERROR_NUM         2     //3?¨º¡À¡ä¨ª?¨®?¨¬2ao¡¥¨ºy¨ºy¨¢?
#define Timeout_release   0     //Time out ¨º¨ª¡¤?
#define TO_SECURITY       0
#define TO_WARNING        1
#define TO_ERROR          2
//3?¨º¡À¡À¡§?¡¥¡ä|¨¤¨ªo¡¥¨ºy??¡À¨²
#define system_init       0
#define debug_upload      1
////?¨¤??¡ä|¨¤¨ªo¡¥¨ºy??¡À¨²
///*------------¡ã¡é¨¬?¨¤-?1?y?¡¥2?¨ºy?¡§¨°?------------*/
#define ParaNum    160		  //2?¨ºyID¨ºy¨¢?
#define Axis_Num   1		  //¦Ì??¨²?¨¢¨ºy

//#define Incremental_Encoder 1 //??¨¢?¡À¨¤???¡Â
//#define Absolute_Encoder 2 	  //????¡À¨¤???¡Â

//#define MotorType_wheel  1    //¦Ì??¨²¨¤¨¤D¨ª¡êo??¨¬¡À

//#define Encoder_Rslt5  500*4	  //500??
//#define Encoder_Rslt10 1000*4	  //1000??
//#define Encoder_Rslt20 2000*4	  //2000??
/*------------¨º?2¡§?¡Â2?¨ºy?¡§¨°?------------*/
#define Read_Only  1
#define Read_Write 0
#define DebugNum 200
#define DebugSubNum 4000
/*--------?y¨®¨¤?¨°2¨¦¡À¨ªo¨º?¡§¨°?--------*/
//#define SIN_MASK  0x0300
//#define U0_90     0x0200
//#define U90_180   0x0300
//#define U180_270  0x0000
//#define U270_360  0x0100
////#define U32_MAX   ((uint32_t)4294967295uL)
//#define SIN_COS_TABLE {\
//0x0000,0x00C9,0x0192,0x025B,0x0324,0x03ED,0x04B6,0x057F,\
//0x0648,0x0711,0x07D9,0x08A2,0x096A,0x0A33,0x0AFB,0x0BC4,\
//0x0C8C,0x0D54,0x0E1C,0x0EE3,0x0FAB,0x1072,0x113A,0x1201,\
//0x12C8,0x138F,0x1455,0x151C,0x15E2,0x16A8,0x176E,0x1833,\
//0x18F9,0x19BE,0x1A82,0x1B47,0x1C0B,0x1CCF,0x1D93,0x1E57,\
//0x1F1A,0x1FDD,0x209F,0x2161,0x2223,0x22E5,0x23A6,0x2467,\
//0x2528,0x25E8,0x26A8,0x2767,0x2826,0x28E5,0x29A3,0x2A61,\
//0x2B1F,0x2BDC,0x2C99,0x2D55,0x2E11,0x2ECC,0x2F87,0x3041,\
//0x30FB,0x31B5,0x326E,0x3326,0x33DF,0x3496,0x354D,0x3604,\
//0x36BA,0x376F,0x3824,0x38D9,0x398C,0x3A40,0x3AF2,0x3BA5,\
//0x3C56,0x3D07,0x3DB8,0x3E68,0x3F17,0x3FC5,0x4073,0x4121,\
//0x41CE,0x427A,0x4325,0x43D0,0x447A,0x4524,0x45CD,0x4675,\
//0x471C,0x47C3,0x4869,0x490F,0x49B4,0x4A58,0x4AFB,0x4B9D,\
//0x4C3F,0x4CE0,0x4D81,0x4E20,0x4EBF,0x4F5D,0x4FFB,0x5097,\
//0x5133,0x51CE,0x5268,0x5302,0x539B,0x5432,0x54C9,0x5560,\
//0x55F5,0x568A,0x571D,0x57B0,0x5842,0x58D3,0x5964,0x59F3,\
//0x5A82,0x5B0F,0x5B9C,0x5C28,0x5CB3,0x5D3E,0x5DC7,0x5E4F,\
//0x5ED7,0x5F5D,0x5FE3,0x6068,0x60EB,0x616E,0x61F0,0x6271,\
//0x62F1,0x6370,0x63EE,0x646C,0x64E8,0x6563,0x65DD,0x6656,\
//0x66CF,0x6746,0x67BC,0x6832,0x68A6,0x6919,0x698B,0x69FD,\
//0x6A6D,0x6ADC,0x6B4A,0x6BB7,0x6C23,0x6C8E,0x6CF8,0x6D61,\
//0x6DC9,0x6E30,0x6E96,0x6EFB,0x6F5E,0x6FC1,0x7022,0x7083,\
//0x70E2,0x7140,0x719D,0x71F9,0x7254,0x72AE,0x7307,0x735E,\
//0x73B5,0x740A,0x745F,0x74B2,0x7504,0x7555,0x75A5,0x75F3,\
//0x7641,0x768D,0x76D8,0x7722,0x776B,0x77B3,0x77FA,0x783F,\
//0x7884,0x78C7,0x7909,0x794A,0x7989,0x79C8,0x7A05,0x7A41,\
//0x7A7C,0x7AB6,0x7AEE,0x7B26,0x7B5C,0x7B91,0x7BC5,0x7BF8,\
//0x7C29,0x7C59,0x7C88,0x7CB6,0x7CE3,0x7D0E,0x7D39,0x7D62,\
//0x7D89,0x7DB0,0x7DD5,0x7DFA,0x7E1D,0x7E3E,0x7E5F,0x7E7E,\
//0x7E9C,0x7EB9,0x7ED5,0x7EEF,0x7F09,0x7F21,0x7F37,0x7F4D,\
//0x7F61,0x7F74,0x7F86,0x7F97,0x7FA6,0x7FB4,0x7FC1,0x7FCD,\
//0x7FD8,0x7FE1,0x7FE9,0x7FF0,0x7FF5,0x7FF9,0x7FFD,0x7FFE }


/*-----------------------------------?¨¢11¨¬?-------------------------------------*/
/*-----¡äy¡ä¨°¨®?¨ºy?Y?¨¢11¨¬?-----*/
typedef struct
{
		struct
		{
			double aim;
			double feed;
			double error;
		}print_speed;			 //?¨´?¨¨¡ä¨°¨®?
		 struct
		{
			double aim;
			double feed;
			double error;
		}print_iq;			     //Iq¡ä¨°¨®? 
		struct
		{
			double aim;
			double feed;
			double error;
		}print_position;		 //????¡ä¨°¨®?
		 struct
		{
			double aim;
			double feed;
			double error;
		}print_id;				 //Id¡ä¨°¨®?
}print_output;
			
/*-----SVPWM?¨¢11¨¬?-----*/
typedef struct
{                                      
	int16_t A;
	int16_t B;
	int16_t C;
	int16_t N;
	float K;
	float M;
	int32_t X;
	int32_t Y;
	int32_t Z;
	int32_t T1;
	int32_t T2;
	int32_t T0;
	int32_t A_PWM;
	int32_t B_PWM;
	int32_t C_PWM;
} SVPWM;
/*-----¡¤¡ä¨¤?¨¢??¨¢11¨¬?-----*/
typedef struct
{
	int32_t QEP;
	int16_t angle;
	float SPEED;
	int32_t POSITION;
	float I_u;
	float I_v;
	float I_alpha;
	float I_beta;
	float I_q;
	float I_d;
	float Uref_alpha;
	float Uref_beta;
	float U_q;
	float U_d;
} Feedback;
/*-----PID?????¡Â?¨¢11¨¬?-----*/
//typedef struct
//{
//	int Instance;
//	long	Kp;
//	long  Ki;
//	long  Kd;
//	float Error;                 //?¨®2?
//	float iError;                //?¨®2?¦Ì??y¡¤?
//	float dError;                //?¨®2?¦Ì??¡é¡¤?
//	float LastError;             //¨¦?¡ä?¦Ì??¨®2?
//	int32_t Lower_Limit_Output;  //¨º?3?¡Á?D??T??
//	int32_t Upper_Limit_Output;  //¨º?3?¡Á?¡ä¨®?T??
//	int32_t Upper_Limit_Integral;//?y¡¤???¡Á?D??T??
//	int32_t Lower_Limit_Integral;//?y¡¤???¡Á?¡ä¨®?T??	
//	float Proportional_Term;
//	float Integral_Term; 
//	float Derivative_Term;
//	float Output;
//	float LastOutput;
//} PID;

///*-----???¡ê2?¨ºy?¨¢11¨¬?-----*/
//typedef struct
//{
//  float Error;              //?¨®2?
//  float DError;             //?¨®2?¦Ì??¡é¡¤?
//  float PreError;           //¨¦?¡ä??¨®2?
//  float Upper_Limit_Output;
//  float Lower_Limit_Output;
//  float DReference;         //¨º?¨¨?¦Ì??¡é¡¤?
//  float PreReference;       //¨¦?¡ä?¨º?¨¨?
//  float	DDReference;        //¨º?¨¨?¦Ì??t?¡Á?¡é¡¤?
//  float PreDReference;      //¨¦?¡ä?¨º?¨¨?¦Ì??¡é¡¤?
//  float	cSMC;           
//  float kSMC;
//  float ySMC;
//  float s;
//  float Output;
//} SMC;

/*-----¨¨y??o¡¥¨ºy?¨¢11¨¬?-----*/
//typedef struct
//{
//  float hCos;
//  float hSin;
//} Trig_Components;

/*-----¡ã¡é¨¬?¨¤-?12?¨ºy¡ä?¡ä¡é?¨¢11¨¬?-----*/
//2?¨ºy¨º?D??¨¢11¨¬?
typedef struct
{
	unsigned			bReadOnly : 1; 		//?¨¢D¡ä¨º?D?
	unsigned			bOKInMotion: 1; 	//¨º?¡¤??¨ºD¨ª???¡¥?DDT??
	unsigned			bOKMotorOn : 1; 	//¨º?¡¤??¨ºD¨ª¨º1?¨¹¨º¡ÀDT??
	unsigned			bIsArray : 1;   	//¨º?¡¤?¨ºy¡Á¨¦¨¤¨¤D¨ª 
	unsigned			bSaveToFlash : 1; 	//¨º?¡¤??¨ºD¨ª¡À¡ê¡ä?Flsash
	unsigned			bAxisRelated: 1; 	//¨º?¡¤??¨¢?¨¤1?
	unsigned			bReserved1 : 2;

}PARAMETER_ATTRIBUTES;
//¡ã¡é¨¬?¨¤-?1?y?¡¥¨ºy?Y2?¨ºy¡À¨ª?¨¢11¨¬?

//#pragma pack(4)  //¨¦¨¨????¡Á??¨²????
typedef struct 
{
	short								sParID;                                                                                  
	short								sAddress; 		//¨ª¡§??2?¨ºy¦Ì??¡¤	
	PARAMETER_ATTRIBUTES		        stAttributes;   //?¨¤1?¨º?D?
	short								sMaxArrayIndex; //¨ºy¡Á¨¦?¡Â¨°y¡Á?¡ä¨®?¦Ì
	long								lMinValue; 	    //¡Á?D?¨¨??¦Ì 
	long 								lMaxValue; 		//¡Á?¡ä¨®¨¨??¦Ì¡¤??¡ì
	long								lDefaultValue;  //??¨¨??¦Ì
	long*								lpParam; 		//??¨®|¡À?¨¢?¨®3¨¦?

}PARAMETER_TABLE;

typedef struct 
{
	long funcEn;
	long funcState;
	u8 funcType;
}DEBUG_HANDLE;
//¨¦????¨²¦Ì¡Â¨º?1|?¨¹¡Á¡ä¨¬?¨¢?
typedef struct 
{
	long Oscp;  //¨º?2¡§?¡Â???-?¡äDD¡Á¡ä¨¬?¨¢?
	long Upload;//¨º?2¡§?¡Â¨ºy?Y¡ã¨¹¨¦?¡ä?¡Á¡ä¨¬?¨¢?
	long Indep_WR;//?¨¤¨¢¡é2?¨ºy?¨¢D¡ä¡Á¡ä¨¬?
	long Interface;//GUI1|?¨¹????2?¨ºyUpload
	long InterType;//GUI1|?¨¹????¨¤¨¤D¨ª
	long ParaUpload;//Atlas para upload
  long ParaDownload;//Atlas para download
}DEBUG_STATE;
//¨ª¡§D?D-¨°¨¦?¨¢11¨¬?
typedef struct 
{
	long Sci_BaudRate[3];		//2¡§¨¬??¨º3??¦Ì2??[9600 19200 115200]
	long Sci_Resp_Cmd;			//¡À??¨²???¡äCMD??¡ä??¡Â
	u16 Sci_RsCheckDate;     //D¡ê?¨¦¨ºy?Y
	u16 Sci_TsCheckDate;
	long Sci_ErrClr_En;
	short Para_addr;
	long Sci_state;
	char Sci_SxBuffer[15];
	char Sci_RxBuffer[15];
  long Obj_data;
	
	u8 Sci_Monitor_En;
	u32 Sci_Timing;
}SCICOM;
typedef struct 
{
  uint16_t  pDateCheck;
  uint16_t  pArray[10];
  uint16_t  pDateLen;
}_CRC;

extern void HALL1_Init_Electrical_Angle( void );
extern u8 HALL_GetPhase1(void);
extern uint8_t PrevHallState1,PrevHallState2,HallState1,HallState2;

extern u16 Uart_TxBuffer_CNT ;
extern u16 Uart_TxBuffer_CNT1;
extern int16_t  HAL_CommutationAngle;

#ifdef UART_DEBUG		
     extern  int16_t LV_Uart_TxBuffer[4][4010];
#endif
			
#ifdef Usart_Labview			
extern LabView_Uart_TxBuffer[4][2010];
      
#endif

extern float CurrentPosition1,CurrentPosition2;
extern long SetPulseMotor1,SetPulseMotor2,ActuralSpeedMotor1,ActuralSpeedMotor2;


extern u8 TempID1 ,TempID2 ,TempID3 ,TempID4 ,	Labview_uart_100us_Flag;
/*--------------------------------¨ªa2?¡À?¨¢?¨¦¨´?¡Â----------------------------------*/
/*--------?¦Ì¨ª3?¡§¨º¡À¡À?¨¢?----------*/
//extern int8_t  tim_cnt_1ms;
//extern float tick_1ms;
//extern u16 T1_CC4_Triger;
///*--------3?¨º¡À¡ä|¨¤¨ª¡À?¨¢?----------*/
//extern u32 systic_cnt;
//extern u8 time_out_flag;            
//extern u32 time_out_cnt;   
//extern u32 time_pos[2];
//extern u8 function_comp_flag[2];
//extern u16 System_error_table[ERROR_NUM];
//extern u32 time_used_note;
//extern u16 function_handler;
///*--------?¦Ì¨ª31|?¨¹¡À?¨¢?----------*/
//extern  int8_t Motor_state;
//extern long Motor_mode;
//extern long Pre_Motor_mode;
//extern int8_t Mode_switch_flag;
//extern int8_t Motor_brake;
//extern int8_t Motor_brake_cnt;
//extern int8_t Motor_direction;
//extern u8  bSector;
//extern uint16_t Printf_speed;		//Max:10kHz
//extern u16 TIM_CC4_Triger;
///*-----------------T¡¤¡§2a?¨´¨ºy?Y----------------*/
//#define T_Mesure   0  
//#define M_Mesure   1
//extern int32_t tim5_cnt,Capture_tim5_t,Capture_tim2_t;
//extern unsigned int tim5_inter_cnt,tim2_inter_cnt;
//extern unsigned int STA_Capture_tim5,STA_Capture_tim2;
//extern float SPEED_Former,SPEED_Later;				
//extern int32_t SPEED_Direction;
//extern unsigned CapEdge_flag;
//extern float Sampling_period;												
//extern unsigned int M1_cnt,M2_cnt,M1_complete_flag;
//extern int32_t CaptureNumber_last;
//extern int32_t CaptureNumber_former[2];//?????¨¹?¨²?¡ã¦Ì??¨´?¨¨?¨¢??


//extern s32 wTimePhA, wTimePhB, wTimePhC;
//extern u16  hTimePhA, hTimePhB, hTimePhC;
//extern u16 Uart_N_100us;
//extern u8 uart_counter;
////extern u8 Uart_N_100us_Flag;
////extern u8 TxBuffer[TxBufferSize];      //¡¤¡é?¨ª?o3???
///*--------?????¡Â2?¨ºy----------*/
//extern  PID PID_Flux;
//extern  PID PID_Torque;
//extern  PID PID_Speed;
//extern  PID PID_Position;
//extern float Torque_Reference;
//extern float Flux_Reference;
//extern long Speed_Reference;
//extern long Position_Reference;
//extern long Speed_refer;
///*--------???¡ê2?¨ºy----------*/
//extern  SMC SMC_Struct;
//extern	float eSMC;
//extern	float cSMC;           
//extern	float kSMC;
///*--------¡À¨¤???¡Â2¨¦?¨´¨ºy?Y----------*/
//extern int32_t  CaptureNumber[2];
//extern int32_t OverflowCount; 
//extern float Pre_Feedback_speed;
//extern float Last_Feedback_speed;
//extern float FILTER_Ratio;
//extern u8 		PreDirFlag,LastDirFlag;
///*--------????2¨¦?¨´¨ºy?Y----------*/
//#define Hall_DisMeasure 1
//extern long  Ha11_Distance_P[6] ;             //?????¨¤¨¤?
//extern long  Ha11_Angle_P[6];                 //???????¨¨
//extern long  Ha11_Distance_N[6] ;             //?????¨¤¨¤?
//extern long  Ha11_Angle_N[6];                 //???????¨¨
//extern int16_t  Ha11_Distance[6];
//extern long  zero_position;           //¦Ì??¨²¨¢???o¨ª¡À¨¤???¡Â¨¢????????¨¤¨¤?
//extern int16_t  Disposable_zero_position;//¦Ì£¤¡ä??¡äDD¡À?¨¢?
//extern short		Zero_DetectState_Flag;
//extern long			glHallStatData[];
///*--------ADC2¨¦?¨´¨ºy?Y----------*/
//extern u16 ADC_Init_table[ADC_Channel_cnt][ADC_Init_N];
//extern u16 ADC_Init_offset_sum[ADC_Channel_cnt];
//extern u16 ADC_Init_offset_avg[ADC_Channel_cnt];
//extern int32_t  ADC_ConvertedValueLocal[ADC_Channel_cnt];
//extern uint32_t  ADC_ConvertedValue[ADC_Channel_cnt];
//extern float CURRENT_temp_A;
//extern float CURRENT_temp_B;
//extern float CURRENT_temp_C;
//extern uint32_t DMA_Transfer_Complete_Count;
///*-----?¨´?¨¨??2¡§¡À?¨¢?[???¨´¡¤¡§]-----*/
//extern int16_t  filter_buf[FILTER_N];
//extern int32_t  filter_sum;
//extern int32_t  Speed_temp;
///*--------FOC¨ºy?Y¡À?¨¢?----------*/
//extern Feedback    Feedback_Data;
//extern SVPWM       SVPWM_Data;   
//extern Trig_Components Vector_Components;
//extern int16_t  Udc;              //Bus Voltage
//extern float    Uref1,Uref2,Uref3;
//extern float cos_da;
//extern float sin_da;
//extern float  Angle_Bias;
//extern int32_t TIM3_CNT_COUNTER;
///*---------?¨´?¨¨/????¡À??¡¥?¡Â¨º?????¡À?¨¢?---------*/
//extern __IO int position_stable;
//extern float Limit_OutChangeRate;

//extern int8_t 						Hall_state;
//extern int16_t  					Electrical_Angle;	
//extern long								glDebugTestD[];  //for test data 
//extern short   						gsMachineStat[];
////extern long								glInTargetTol[]; 
////extern long								glInTargetTime[]; 
//extern long								glInTargetStat[];
//extern long 							loopCalcMask[];
//extern long								glPreControlMode[];
//extern float       				gfVelHistorySum[];
//extern long	     					guOldestVelIndex[];
//extern long        				glIsrTicker[];
//extern long				glWaitSetBrakeOn[];
//extern long				glBrkSpeed[];
//extern long				glBrkOnDly[];
//extern long				glBrkOffDly[];
//extern short      gsBrkState[];
//extern short			gsCorrectEncAngFlag;
//extern short			gsCorrectEncAngFlag2;
//extern long				glPreMotorHallSector;
//extern short			gsRuningDirFlag;
//extern short			gsSetPosFlag;

///*---------¨º?2¡§?¡Â?¨¤1?¡À?¨¢?---------*/
//extern long gssiRecLength;  
//extern long gssiRecLength_pre;
//extern float gfRecTime;
//extern long gssiRecGap;      
//extern long gssiRecGap_pre;
//extern long gssiRecTrigSrc;       
//extern long gssiRecTrigval;        
//extern long gssiRecTrigPos;        
//extern long gssiRecTrigType;       
//extern long gssiRecData[4000];     
//extern long gssiRecStart;          
//extern long gssiRecStop;           
//extern long gssiRecTrigForce;    
//extern long PreUpdate[9];  
//extern long testAdd;
//extern Uint16 gsEncConnected;
//extern Uint16 gsEncConnectSts;
//extern int16  	gsABZDisconnectCnt[][3];
//extern long		glIndexPos[];
//extern long 	glPosLimitSetReq[];
//extern short	gsEncoder_Z[];
//extern short	gsEncoder_Z_Pre[];
//extern long		glEncZTimeCnt[];
//extern long		Zphase_position;
//extern short	Zero_DetectionState[];
//extern long   glJerkTemp[];
//extern Uint16 guSetSmoothShapingBufferReq[];
//extern long		glSave[];
//extern u8 		SVpwm_switch;
//extern long		glElecRes[];

//extern int 		AbsAngle_test;


//extern u16 Record_cnt;
//extern u16 Record_num;
//extern u8 Start_Record_flag;    
//extern u8 Stop_Record_flag;  
//extern long DebugErr_reg;
//extern long OspRecID[4]; 
//extern long OspRecSubID[4];
//extern long TriggerID;
//extern long TriggerSubID;
//extern long Trigger_mode;
//extern u8 Trigger_time;
//extern u8 Trigger_mode_flag;

//extern float CURR_SAMP_CONDUCT;     //2¨¦?¨´¦Ì?¦Ì?
//extern float CURR_SAMP_AMP;        //¡¤?¡ä¨®¡À?¨ºy¦Ì?¦Ì1¨ºy
///*---------¡ã¡é¨¬?¨¤-?12?¨ºy¡ä?¡ä¡é?¨¤1?¡À?¨¢?---------*/
extern const PARAMETER_TABLE  PARAMETER[];
//extern PARAMETER_TABLE Maxon_Parameter[];
///*---------¦Ì¡Â¨º?(¨º?2¡§?¡Â)2?¨ºy¡ä?¡ä¡é?¨¤1?¡À?¨¢?---------*/
//extern long RecDATA[DebugNum];
//extern long RecID[DebugNum];
//extern long RecSubID[DebugSubNum];
//extern long RecNum;
//extern u8 UserCmd_Type;
//extern DEBUG_STATE STATE;
//extern DEBUG_HANDLE pDebug;
//extern u8 pDebug_En;
//extern u8 pInterface_En;
extern long FlashArray[];


//extern long pTest[30];
//extern u8 DrvBitArray[11];  // drv8323?¨¢¨¨?¦Ì?¨ºy?Ybit¡ä?¡¤?

///*---------¡ã¡é¨¬?¨¤-?1¨ª¡§D?D-¨°¨¦?¨¤1?¡À?¨¢?---------*/
//extern SCICOM RsCOM;
//extern u8 Speed_Switch ;
//extern u32 Cnt_100us;                   //100us??¨ºy
//extern u16 Cnt_100us_N;                 //N¡ä?100us
////MAXON
//extern _CRC MaxonCrc;
///*--------------------------------¨ªa2?o¡¥¨ºy¨¦¨´?¡Â----------------------------------*/
///*--------?¡§¨º¡À?¡Â??¡À¨²----------*/
//extern TIM_HandleTypeDef TIM2_Handler; 
//extern TIM_HandleTypeDef htimx_Encoder;
//extern TIM_HandleTypeDef TIM5_Handler; 
///*--------FOC??¡¤¡§o¡¥¨ºy----------*/
//extern void  Get_Currents(void);
//extern void Clark(float I_u,float I_v);
//extern void Park(float I_alpha,float I_beta,float w);
//extern void Clark_Park(float I_u,float I_v,float w);
//extern void Park_n(float U_d,float U_q);
//extern Trig_Components Trig_Functions(int16_t);
//extern void  Svpwm_CalcDutyCycles(void);
//extern void  FOC_Cal(void);
///*--------PIDo¡¥¨ºy----------*/
//extern void  PID_Init (PID *PID_Torque,PID *PID_Flux,PID *PID_Speed,PID *PID_Position);
//extern float PID_Regulator(float Reference, float PresentFeedback, PID *PID_Struct);
///*--------???¡ê??¡¤¡§o¡¥¨ºy----------*/
//extern float SMC_Position(float Reference, float PresentFeedback,float Speed);
//extern float SMC_Speed(float Reference, float Feedback);
///*--------?¨´?¨¨??2¡§o¡¥¨ºy----------*/
//extern float Speed_Filter(float speed);
//extern float OneRC_filter(float PreData,float LastData,float k_filter);
//extern float OneRC_dynamic_filter(float PreData,float LastData,float k_filter);
///*--------?¨´?¨¨/????????o¡¥¨ºy----------*/
//extern int32_t Position_Ref_SET(float a,float v,float P,float t);
//extern int32_t Speed_Ref_SET(float a,float v,float tick);
//extern int32_t Speed_brake(float a,float v,float t);
///*--------3?¨º¡À¡ä|¨¤¨ªo¡¥¨ºy----------*/
//extern u8 Time_out(u16 function,u32 time_medium,u32 time_heavy,u8 flag);
//extern u32 Time_out_error(u8 PreemptPriority,u8 SubPriority);
//extern void Time_out_error_query(u16 *function);
///*--------1?12o¡¥¨ºy----------*/
//extern uint16_t CalcFieldCRC(uint16_t* pDataArray, uint16_t ArrayLength);
//extern int32_t in32abs(int32_t a);  //?????¦Ìo¡¥¨ºy[¨¤¨¤D¨ª¡êoint32_t]
//extern float f_abs(float a);         //?????¦Ìo¡¥¨ºy[¨¤¨¤D¨ª¡êofloat]
//extern short Atlas_GetID_FroAddr(short addr);
//extern short Maxon_GetID_FroAddr(short addr);
//extern void BusVoltage_calculate(void);

////extern certen outside Funcs add
//extern  void 	MotorOnRequestHandler(void);
//extern  void 	GetEncPosition(void);
//extern  short ServoDrvStateMachine(short , short );
//extern 	short Get_CurrentOpFlag(long);
//extern  void 	PosCmd(void);
//extern  void 	VelCmd(void);
//extern  void 	TorCmd(void);
//extern  void 	AxisVelocityCalc(void);
//extern  void 	AxisVelocityPLLCalc(void);
//extern  void 	MotionReferenceSet(short );
//extern  void  PositionModeCurve(short );
//extern  void  VelocityModeCurve(short);
//extern  void  TorqueModeCurve(short);
//extern  void  OperationModeSwitch(short );
//extern  void  CtrlVariablesReset(short);
//extern  void 	VelocityThresholdCheck(short);
//extern  void 	ControlErrorMonitor(short);
//extern  void  InitIdentity(void);
////extern  void  PositionProfileCalc(short );
//extern  float DivSqrt(float );
//extern void ADVANCED_TIM1_Init(void);
//extern void debud_uart(void);
//extern void SVPWM_3ShuntCalcDutyCycles (void);
//extern void InitParams(void);
//extern void homingProcess(void);
//extern void LimitationMotionHandle(short );
//extern void SetSmoothShapingBuff(short);
//extern void DigitOutputProcess(void);

extern PID_Handle_t PID_PosParamsM1;
extern PID_Handle_t PID_PosParamsM2;
extern Trapezoidal_Handle_t pTrapezoidalM1;
extern Trapezoidal_Handle_t pTrapezoidalM2;
extern PID_Handle_t PIDSpeedHandle_M1;
extern PID_Handle_t PIDSpeedHandle_M2;
extern PID_Handle_t PIDIqHandle_M1;
extern PID_Handle_t PIDIqHandle_M2;
extern FOCVars_t FOCVars[2];
extern float SetPositionMotor1,SetPositionMotor2;
extern int32_t CurrentPosition11,CurrentPosition22;
extern SpeednTorqCtrl_Handle_t SpeednTorqCtrlM1;
extern SpeednTorqCtrl_Handle_t SpeednTorqCtrlM2;
extern ENCODER_Handle_t ENCODER_M1;
extern ENCODER_Handle_t ENCODER_M2;
extern EncAlign_Handle_t EncAlignCtrlM1;
extern EncAlign_Handle_t EncAlignCtrlM2;
extern MCI_Handle_t Mci[2];
extern pSpeedMesa pSpeed_Mesa,pSpeed_Mesa2;
extern int32_t VelocityPLLSwitch ;//?-16??


extern s32 NTC_AvTemp_C1,NTC_AvTemp_C2,VBS_AvBusVoltage_V;
extern long Torque_Flux1 ,Torque_Flux2 ;
extern s16 HALL_CH1_ValueOffset,HALL_CH2_ValueOffset;
extern s32 imuData_Pitch,imuData_Yaw,imuData_Roll;
extern int16_t HAL_Init_Electrical_Angle;
	
//(long*)&PID_PosParamsM1.hKpGain 
//(long*)&PID_PosParamsM1.hKiGain 
//(long*)&PID_PosParamsM1.hKdGain 

//(long*)&pTrapezoidalM1.A
//(long*)&pTrapezoidalM1.D
//(long*)&pTrapezoidalM1.Vav

//(long*)&PIDSpeedHandle_M1.hKpGain  
//(long*)&PIDSpeedHandle_M1.hKiGain  

//(long*)&PIDIqHandle_M1.hKpGain  
//(long*)&PIDIqHandle_M1.hKiGain  

//(long*)&PID_PosParamsM2.hKpGain 
//(long*)&PID_PosParamsM2.hKiGain 
//(long*)&PID_PosParamsM2.hKdGain 

//(long*)&pTrapezoidalM2.A
//(long*)&pTrapezoidalM2.D
//(long*)&pTrapezoidalM2.Vav

//(long*)&PIDSpeedHandle_M2.hKpGain  
//(long*)&PIDSpeedHandle_M2.hKiGain  

//(long*)&PIDIqHandle_M2.hKpGain  
//(long*)&PIDIqHandle_M2.hKiGain  


//(long*)&SetPositionMotor1
//(long*)&CurrentPosition11
//(long*)&hDurationms11

//(long*)&SetPositionMotor2
//(long*)&CurrentPosition22
//(long*)&hDurationms22

//(long*)&SetSpeedMotor1
//(long*)&Speed_PLL_Motor1
//(long*)&hDurationms1

//(long*)&SetSpeedMotor2
//(long*)&Speed_PLL_Motor2
//(long*)&hDurationms2


//(long*)&SpeednTorqCtrlM1.MaxAppPositiveMecSpeedUnit
//(long*)&SpeednTorqCtrlM1.MinAppNegativeMecSpeedUnit
//(long*)&SpeednTorqCtrlM1.MaxPositiveTorque
//(long*)&SpeednTorqCtrlM1.MinNegativeTorque
//(long*)&SpeednTorqCtrlM1.TorqueRefDefault

//(long*)&SpeednTorqCtrlM2.MaxAppPositiveMecSpeedUnit
//(long*)&SpeednTorqCtrlM2.MinAppNegativeMecSpeedUnit
//(long*)&SpeednTorqCtrlM2.MaxPositiveTorque
//(long*)&SpeednTorqCtrlM2.MinNegativeTorque
//(long*)&SpeednTorqCtrlM2.TorqueRefDefault

//(long*)&ENCODER_M1._Super.bElToMecRatio 
//(long*)&ENCODER_M1._Super.wMecAngle 
//(long*)&ENCODER_M1._Super.hAvrMecSpeedUnit 

//(long*)&ENCODER_M2._Super.bElToMecRatio 
//(long*)&ENCODER_M2._Super.wMecAngle 
//(long*)&ENCODER_M2._Super.hAvrMecSpeedUnit 

//(long*)&EncAlignCtrlM1.hFinalTorque
//(long*)&EncAlignCtrlM1.hElAngle 
//(long*)&EncAlignCtrlM1.hDurationms 

//(long*)&EncAlignCtrlM2.hFinalTorque
//(long*)&EncAlignCtrlM2.hElAngle 
//(long*)&EncAlignCtrlM2.hDurationms 

//(long*)&Mci[M1].LastModalitySetByUser
//(long*)&Mci[M2].LastModalitySetByUser

//(long*)&pSpeed_Mesa.fPLL_Kp
//(long*)&pSpeed_Mesa.fPLL_Ki

//(long*)&pSpeed_Mesa2.fPLL_Kp
//(long*)&pSpeed_Mesa2.fPLL_Ki

//(long*)&FOCVars[M1].Iab.a
//(long*)&FOCVars[M1].Iab.b
//(long*)&FOCVars[M1].Ialphabeta.alpha
//(long*)&FOCVars[M1].Ialphabeta.beta
//(long*)&FOCVars[M1].Iqdref.q
//(long*)&FOCVars[M1].Iqdref.d
//(long*)&FOCVars[M1].Iqd.q
//(long*)&FOCVars[M1].Iqd.d

//(long*)&FOCVars[M1].Vqd.q
//(long*)&FOCVars[M1].Vqd.d
//(long*)&FOCVars[M1].Valphabeta.alpha
//(long*)&FOCVars[M1].Valphabeta.beta
//(long*)&FOCVars[M1].hElAngle 

//(long*)&FOCVars[M2].Iab.a
//(long*)&FOCVars[M2].Iab.b
//(long*)&FOCVars[M2].Ialphabeta.alpha
//(long*)&FOCVars[M2].Ialphabeta.beta
//(long*)&FOCVars[M2].Iqdref.q
//(long*)&FOCVars[M2].Iqdref.d
//(long*)&FOCVars[M2].Iqd.q
//(long*)&FOCVars[M2].Iqd.d
//(long*)&FOCVars[M2].Iqdref.q
//(long*)&FOCVars[M2].Iqdref.d
//(long*)&FOCVars[M2].Vqd.q
//(long*)&FOCVars[M2].Vqd.d
//(long*)&FOCVars[M2].Valphabeta.alpha
//(long*)&FOCVars[M2].Valphabeta.beta
//(long*)&FOCVars[M2].hElAngle 
//RealBusVoltageSensorFilterBufferM1

typedef struct SEVERO_CONTORL_PAR_Ttag
{
	int32_t SetVelMotor;   //¸ø¶¨ËÙ¶È
	int32_t Vel_PLL_Motor; //Êµ¼ÊËÙ¶È
	int32_t SetTorqueMotor; //¸ø¶¨Á¦¾Ø
	uint32_t hDurationms;	 //¼ÓËÙ¶È¼õËÙ¶È³ÖÐøÊ±¼ä
	int32_t torqueLimit; //Á¦¾ØÏÞÖÆ×î´óÖµ
}SEVERO_CONTORL_PAR_T;
extern SEVERO_CONTORL_PAR_T pCtrlPar[NUMBER_OF_AXES];
extern SEVERO_CONTORL_PAR_T pCtrlPar_M1;
extern SEVERO_CONTORL_PAR_T pCtrlPar_M2;
#endif
/*------------------------------------------------------------------------------*/

