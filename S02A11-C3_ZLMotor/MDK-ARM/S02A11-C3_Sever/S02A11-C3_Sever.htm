<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\S02A11-C3_Sever\S02A11-C3_Sever.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\S02A11-C3_Sever\S02A11-C3_Sever.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Thu Feb 16 19:53:16 2023
<BR><P>
<H3>Maximum Stack Usage =        400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SysTick_Handler &rArr; Sci_Stack_Monitor &rArr; Usart3_Data_T0_Canopen &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">NMI_Handler</a><BR>
 <LI><a href="#[24]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">MemManage_Handler</a><BR>
 <LI><a href="#[25]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">BusFault_Handler</a><BR>
 <LI><a href="#[26]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">UsageFault_Handler</a><BR>
 <LI><a href="#[27]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">SVC_Handler</a><BR>
 <LI><a href="#[28]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">DebugMon_Handler</a><BR>
 <LI><a href="#[29]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">PendSV_Handler</a><BR>
 <LI><a href="#[3f]">CAN1_RX0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">CAN1_RX0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3d]">ADC_IRQHandler</a> from stm32f4xx_mc_it.o(i.ADC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">CAN2_RX0_IRQHandler</a> from bsp_can.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[85]">ConsumerHeartbeatAlarm</a> from canopen_lifegrd.o(i.ConsumerHeartbeatAlarm) referenced from canopen_lifegrd.o(i.HeartBeat_Message_Handle)
 <LI><a href="#[79]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">EXTI0_IRQHandler</a> from stm32f4xx_mc_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">EXTI15_10_IRQHandler</a> from stm32f4xx_mc_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">EXTI9_5_IRQHandler</a> from stm32f4xx_mc_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7b]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7a]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">HardFault_Handler</a> from stm32f4xx_mc_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[86]">MCP_OnTimeOut</a> from motor_control_protocol.o(i.MCP_OnTimeOut) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[87]">MCP_ReceivedFrame</a> from motor_control_protocol.o(i.MCP_ReceivedFrame) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[88]">MCP_SentFrame</a> from motor_control_protocol.o(i.MCP_SentFrame) referenced from motor_control_protocol.o(i.MCP_Init)
 <LI><a href="#[24]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">ODCallback_t_Index1010_Subindex1</a> from canopen_od.o(i.ODCallback_t_Index1010_Subindex1) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[f]">ODCallback_t_Index1016_Subindex</a> from canopen_lifegrd.o(i.ODCallback_t_Index1016_Subindex) referenced 12 times from canopen_od.o(.data)
 <LI><a href="#[a]">ODCallback_t_Index200B_Subindex0</a> from canopen_od.o(i.ODCallback_t_Index200B_Subindex0) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[b]">ODCallback_t_Index2011_Subindex0</a> from canopen_od.o(i.ODCallback_t_Index2011_Subindex0) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[c]">ODCallback_t_Index2012_Subindex0</a> from canopen_od.o(i.ODCallback_t_Index2012_Subindex0) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[d]">ODCallback_t_Index3001_Subindex0</a> from canopen_od.o(i.ODCallback_t_Index3001_Subindex0) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[10]">ODCallback_t_RPDO_Communicate</a> from canopen_pdo.o(i.ODCallback_t_RPDO_Communicate) referenced 4 times from canopen_od.o(.data)
 <LI><a href="#[12]">ODCallback_t_RPDO_Map</a> from canopen_pdo.o(i.ODCallback_t_RPDO_Map) referenced 16 times from canopen_od.o(.data)
 <LI><a href="#[11]">ODCallback_t_RPDO_MapSubindex0</a> from canopen_pdo.o(i.ODCallback_t_RPDO_MapSubindex0) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[13]">ODCallback_t_TPDO_Communicate</a> from canopen_pdo.o(i.ODCallback_t_TPDO_Communicate) referenced 12 times from canopen_od.o(.data)
 <LI><a href="#[15]">ODCallback_t_TPDO_Map</a> from canopen_pdo.o(i.ODCallback_t_TPDO_Map) referenced 16 times from canopen_od.o(.data)
 <LI><a href="#[14]">ODCallback_t_TPDO_MapSubindex0</a> from canopen_pdo.o(i.ODCallback_t_TPDO_MapSubindex0) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[6e]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[75]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[78]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">ObjDict_scanIndexOD</a> from canopen_od.o(i.ObjDict_scanIndexOD) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[1c]">ObjDict_valueRangeTest</a> from canopen_od.o(i.ObjDict_valueRangeTest) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[95]">OnHeartbeatProducerUpdate</a> from canopen_lifegrd.o(i.OnHeartbeatProducerUpdate) referenced from canopen_lifegrd.o(i.heartbeatInit)
 <LI><a href="#[94]">OnNumberOfErrorsUpdate</a> from canopen_emcy.o(i.OnNumberOfErrorsUpdate) referenced from canopen_emcy.o(i.emergencyInit)
 <LI><a href="#[97]">PDOEventTimerAlarm</a> from canopen_pdo.o(i.PDOEventTimerAlarm) referenced from canopen_pdo.o(i.sendOnePDOevent)
 <LI><a href="#[98]">PDOInhibitTimerAlarm</a> from canopen_pdo.o(i.PDOInhibitTimerAlarm) referenced from canopen_pdo.o(i.sendOnePDOevent)
 <LI><a href="#[2c]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[96]">ProducerHeartbeatAlarm</a> from canopen_lifegrd.o(i.ProducerHeartbeatAlarm) referenced from canopen_lifegrd.o(i.heartbeatInit)
 <LI><a href="#[3]">R3_2_CurrentReadingCalibration</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[0]">R3_2_GetPhaseCurrents</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_GetPhaseCurrents) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[0]">R3_2_GetPhaseCurrents</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_GetPhaseCurrents) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration)
 <LI><a href="#[0]">R3_2_GetPhaseCurrents</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_GetPhaseCurrents) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
 <LI><a href="#[89]">R3_2_HFCurrentsCalibrationAB</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_HFCurrentsCalibrationAB) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration)
 <LI><a href="#[8b]">R3_2_HFCurrentsCalibrationC</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_HFCurrentsCalibrationC) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration)
 <LI><a href="#[6]">R3_2_IsOverCurrentOccurred</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_IsOverCurrentOccurred) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[8]">R3_2_RLDetectionModeDisable</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[7]">R3_2_RLDetectionModeEnable</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[9]">R3_2_RLDetectionModeSetDuty</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeSetDuty) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[8c]">R3_2_RLGetPhaseCurrents</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLGetPhaseCurrents) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
 <LI><a href="#[8e]">R3_2_RLSwitchOnPWM</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLSwitchOnPWM) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
 <LI><a href="#[8d]">R3_2_RLTurnOnLowSides</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLTurnOnLowSides) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
 <LI><a href="#[8a]">R3_2_SetADCSampPointCalibration</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SetADCSampPointCalibration) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration)
 <LI><a href="#[5]">R3_2_SetADCSampPointSectX</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SetADCSampPointSectX) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[5]">R3_2_SetADCSampPointSectX</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SetADCSampPointSectX) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration)
 <LI><a href="#[1]">R3_2_SwitchOffPWM</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOffPWM) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[1]">R3_2_SwitchOffPWM</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOffPWM) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
 <LI><a href="#[1]">R3_2_SwitchOffPWM</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOffPWM) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
 <LI><a href="#[2]">R3_2_SwitchOnPWM</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOnPWM) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[2]">R3_2_SwitchOnPWM</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOnPWM) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
 <LI><a href="#[4]">R3_2_TurnOnLowSides</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_TurnOnLowSides) referenced 4 times from mc_config.o(.data)
 <LI><a href="#[4]">R3_2_TurnOnLowSides</a> from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_TurnOnLowSides) referenced from r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
 <LI><a href="#[30]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8f]">SDOTimeoutAlarm</a> from canopen_sdo.o(i.SDOTimeoutAlarm) referenced 2 times from canopen_sdo.o(i.SDO_Email_Handler)
 <LI><a href="#[8f]">SDOTimeoutAlarm</a> from canopen_sdo.o(i.SDOTimeoutAlarm) referenced from canopen_sdo.o(i.initSDOline)
 <LI><a href="#[4e]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">SysTick_Handler</a> from stm32f4xx_mc_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[2d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM1_BRK_TIM9_IRQHandler</a> from stm32f4xx_mc_it.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_mc_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">TIM2_IRQHandler</a> from stm32f4xx_mc_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">TIM4_IRQHandler</a> from stm32f4xx_mc_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">TIM6_DAC_IRQHandler</a> from canopen_timer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">TIM8_BRK_TIM12_IRQHandler</a> from stm32f4xx_mc_it.o(i.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">TIM8_UP_TIM13_IRQHandler</a> from stm32f4xx_mc_it.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7f]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[82]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[82]">UART_DMAError</a> from stm32f4xx_hal_uart.o(i.UART_DMAError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[80]">UART_DMAReceiveCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[81]">UART_DMARxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[83]">UART_DMATransmitCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[84]">UART_DMATxHalfCplt</a> from stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[90]">UFCP_AbortReceive</a> from usart_frame_communication_protocol.o(i.UFCP_AbortReceive) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[91]">UFCP_Receive</a> from usart_frame_communication_protocol.o(i.UFCP_Receive) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[92]">UFCP_Send</a> from usart_frame_communication_protocol.o(i.UFCP_Send) referenced from ui_task.o(i.UI_TaskInit)
 <LI><a href="#[50]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">USART3_IRQHandler</a> from stm32f4xx_mc_it.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">_RxPDO_EventTimers_Handler</a> from canopen_pdo.o(i._RxPDO_EventTimers_Handler) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[7e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[19]">_heartbeatError</a> from canopen_lifegrd.o(i._heartbeatError) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[16]">_initialisation</a> from canopen_nmt.o(i._initialisation) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[18]">_operational</a> from canopen_nmt.o(i._operational) referenced 4 times from canopen_od.o(.data)
 <LI><a href="#[1a]">_post_SlaveStateChange</a> from canopen_lifegrd.o(i._post_SlaveStateChange) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[20]">_post_TPDO</a> from canopen_sync.o(i._post_TPDO) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[1f]">_post_sync</a> from canopen_sync.o(i._post_sync) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[17]">_preOperational</a> from canopen_nmt.o(i._preOperational) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[1d]">_storeODSubIndex</a> from canopen_od.o(i._storeODSubIndex) referenced 2 times from canopen_od.o(.data)
 <LI><a href="#[93]">fputc</a> from bsp_debug_usart.o(i.fputc) referenced from printf4.o(i.__0printf$4)
 <LI><a href="#[7c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[275]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[99]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[276]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[277]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[278]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[279]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[27a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[21]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d3]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPDO_Direct_SetODentry
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_MapSubindex0
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_Map
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_Communicate
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_RPDO_MapSubindex0
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_RPDO_Map
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_RPDO_Communicate
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_Index1016_Subindex
</UL>

<P><STRONG><a name="[1e4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Par_402_Init
</UL>

<P><STRONG><a name="[27b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[14e]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[27c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[27d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Stack_Monitor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualDrv_Parameter_Download
</UL>

<P><STRONG><a name="[27f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[a1]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualDrv_Parameter_Download
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowCommand
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowCommand
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowCommand
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CheckFaultState
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowCommand
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowCommand
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CheckFaultState
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowCommand
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CheckFaultState
</UL>

<P><STRONG><a name="[1f0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CheckFaultState
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[281]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[282]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[283]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[b0]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[284]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a6]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[285]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[b2]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[b4]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[286]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>ADC_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ADC_IRQHandler &rArr; TSK_HighFrequencyTask &rArr; FOC_CurrControllerM1 &rArr; MCM_Park &rArr; MCM_Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RPOD_SyncEvent
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>Atlas_LoadDefaultPar</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, bsp_flash.o(i.Atlas_LoadDefaultPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Atlas_LoadDefaultPar
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[b7]"></a>Atlas_Read_Flash</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, bsp_flash.o(i.Atlas_Read_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Atlas_Read_Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashParams
</UL>

<P><STRONG><a name="[b9]"></a>Atlas_Write_Flash</STRONG> (Thumb, 422 bytes, Stack size 64 bytes, bsp_flash.o(i.Atlas_Write_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Atlas_Write_Flash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadWord
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetSector
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_Index1010_Subindex1
</UL>

<P><STRONG><a name="[f4]"></a>AxisVelocityPLLCalc</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, mc_tasks.o(i.AxisVelocityPLLCalc))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[1af]"></a>AxisVelocityPLLCalcInit</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, mc_tasks.o(i.AxisVelocityPLLCalcInit))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[c1]"></a>BubbleSort</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bsp_app_function.o(i.BubbleSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPhaseCheck
</UL>

<P><STRONG><a name="[6b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_can.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>CAN2_Send_Msg</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, bsp_can.o(i.CAN2_Send_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN2_Send_Msg &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSDO
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBootUp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeat_Message_Handle
</UL>

<P><STRONG><a name="[ca]"></a>CANopen_Parameter_Init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, canopen_od.o(i.CANopen_Parameter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CANopen_Parameter_Init &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetState
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>CRC16_chk</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, bsp_usart1.o(i.CRC16_chk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16_chk &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Monitor
</UL>

<P><STRONG><a name="[d0]"></a>CRC16_creat</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, bsp_usart1.o(i.CRC16_creat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16_creat &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Error_Response
</UL>

<P><STRONG><a name="[1e6]"></a>CiA402_TransitionAction</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, ds402.o(i.CiA402_TransitionAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CiA402_TransitionAction
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendingOptionCode
</UL>

<P><STRONG><a name="[fd]"></a>Circle_Limitation</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, circle_limitation.o(i.Circle_Limitation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Circle_Limitation
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[218]"></a>Clear_Brake_Filters_Cnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_app_function.o(i.Clear_Brake_Filters_Cnt))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[85]"></a>ConsumerHeartbeatAlarm</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, canopen_lifegrd.o(i.ConsumerHeartbeatAlarm))
<BR>[Address Reference Count : 1]<UL><LI> canopen_lifegrd.o(i.HeartBeat_Message_Handle)
</UL>
<P><STRONG><a name="[26b]"></a>CopyBits</STRONG> (Thumb, 170 bytes, Stack size 28 bytes, canopen_pdo.o(i.CopyBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RPOD_SyncEvent
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[1a8]"></a>DOUT_SetOutputState</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, digital_output.o(i.DOUT_SetOutputState))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[216]"></a>Damping_Of_Motor</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, bsp_app_function.o(i.Damping_Of_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Damping_Of_Motor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d1]"></a>DefaultPhaseCheck</STRONG> (Thumb, 446 bytes, Stack size 36 bytes, bsp_app_function.o(i.DefaultPhaseCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DefaultPhaseCheck &rArr; BubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_abs
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in32abs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_GetPhaseCurrents
</UL>

<P><STRONG><a name="[239]"></a>DefaultPhaseCheckLinkFunction</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_app_function.o(i.DefaultPhaseCheckLinkFunction))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[15a]"></a>DelAlarm</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, canopen_timer.o(i.DelAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeat_Message_Handle
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_Communicate
</UL>

<P><STRONG><a name="[d4]"></a>DisplayErrorLed_Handle</STRONG> (Thumb, 544 bytes, Stack size 16 bytes, bsp_app_function.o(i.DisplayErrorLed_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DisplayErrorLed_Handle &rArr; LEDSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d8]"></a>Display_error</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, bsp_app_function.o(i.Display_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display_error
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_SetFault
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ClearFault
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[db]"></a>DualDrv_Parameter_Download</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, usart_labview.o(i.DualDrv_Parameter_Download))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DualDrv_Parameter_Download &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
</UL>

<P><STRONG><a name="[dd]"></a>DualDrv_Parameter_Upload</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usart_labview.o(i.DualDrv_Parameter_Upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DualDrv_Parameter_Upload &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
</UL>

<P><STRONG><a name="[de]"></a>EAC_Exec</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, enc_align_ctrl.o(i.EAC_Exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EAC_Exec
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_SetMecAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[228]"></a>EAC_GetRestartState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_GetRestartState))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[1a3]"></a>EAC_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[230]"></a>EAC_SetRestartState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enc_align_ctrl.o(i.EAC_SetRestartState))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[e0]"></a>EAC_StartAlignment</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, enc_align_ctrl.o(i.EAC_StartAlignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EAC_StartAlignment &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAngle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_SetMecAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[199]"></a>ENC_CalcAngle</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, encoder_speed_pos_fdbk.o(i.ENC_CalcAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ENC_CalcAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[e5]"></a>ENC_CalcAvrgMecSpeedUnit</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, encoder_speed_pos_fdbk.o(i.ENC_CalcAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENC_CalcAvrgMecSpeedUnit &rArr; SPD_IsMecSpeedReliable
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[22b]"></a>ENC_Clear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[224]"></a>ENC_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>ENC_Init</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, encoder_speed_pos_fdbk.o(i.ENC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ENC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[df]"></a>ENC_SetMecAngle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, encoder_speed_pos_fdbk.o(i.ENC_SetMecAngle))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Exec
</UL>

<P><STRONG><a name="[31]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_mc_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HALL_GetPhase2
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HALL_GetPhase2
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>Emrgency_Stop</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_app_function.o(i.Emrgency_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Emrgency_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[242]"></a>FCP_CalcCRC</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, frame_communication_protocol.o(i.FCP_CalcCRC))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
</UL>

<P><STRONG><a name="[241]"></a>FCP_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, frame_communication_protocol.o(i.FCP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Init
</UL>

<P><STRONG><a name="[187]"></a>FCP_SetClient</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, frame_communication_protocol.o(i.FCP_SetClient))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_Init
</UL>

<P><STRONG><a name="[f2]"></a>FF_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, feed_forward_ctrl.o(i.FF_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[101]"></a>FF_DataProcess</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, feed_forward_ctrl.o(i.FF_DataProcess))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[1aa]"></a>FF_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, feed_forward_ctrl.o(i.FF_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[fc]"></a>FF_VqdConditioning</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, feed_forward_ctrl.o(i.FF_VqdConditioning))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FF_VqdConditioning
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[118]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[11a]"></a>FLASH_FlushCaches</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[be]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Write_Flash
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[ec]"></a>FOC_CalcCurrRef</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mc_tasks.o(i.FOC_CalcCurrRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FOC_CalcCurrRef &rArr; STC_CalcTorqueReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[ee]"></a>FOC_Clear</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, mc_tasks.o(i.FOC_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FOC_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[bb]"></a>Flash_GetSector</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, bsp_flash.o(i.Flash_GetSector))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Write_Flash
</UL>

<P><STRONG><a name="[b8]"></a>Flash_ReadWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash.o(i.Flash_ReadWord))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Write_Flash
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Read_Flash
</UL>

<P><STRONG><a name="[102]"></a>HALL1_Init_Electrical_Angle</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, bsp_app_function.o(i.HALL1_Init_Electrical_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HALL1_Init_Electrical_Angle &rArr; HALL_GetPhase1
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[106]"></a>HALL2_Init_Electrical_Angle</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, bsp_app_function.o(i.HALL2_Init_Electrical_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HALL2_Init_Electrical_Angle &rArr; HALL_GetPhase2
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase2
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[103]"></a>HALL_GetPhase1</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_app_function.o(i.HALL_GetPhase1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HALL_GetPhase1
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL1_Init_Electrical_Angle
</UL>

<P><STRONG><a name="[107]"></a>HALL_GetPhase2</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_app_function.o(i.HALL_GetPhase2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HALL_GetPhase2
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL2_Init_Electrical_Angle
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_ADCEx_InjectedConfigChannel</STRONG> (Thumb, 508 bytes, Stack size 8 bytes, stm32f4xx_hal_adc_ex.o(i.HAL_ADCEx_InjectedConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADCEx_InjectedConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 356 bytes, Stack size 12 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_ADC_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[10a]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, stm32f4xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
</UL>

<P><STRONG><a name="[10d]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit_IT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_CAN_Init</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
</UL>

<P><STRONG><a name="[10f]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, bsp_can.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[111]"></a>HAL_CAN_Receive_IT</STRONG> (Thumb, 258 bytes, Stack size 4 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CAN_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxCpltCallback
</UL>

<P><STRONG><a name="[c7]"></a>HAL_CAN_RxCpltCallback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_can.o(i.HAL_CAN_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HAL_CAN_RxCpltCallback &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Receive_IT
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_IT
</UL>

<P><STRONG><a name="[c5]"></a>HAL_CAN_Transmit</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>

<P><STRONG><a name="[c9]"></a>HAL_CAN_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_can.o(i.HAL_CAN_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit_IT
</UL>

<P><STRONG><a name="[112]"></a>HAL_DMA_Abort</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[147]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>HAL_DMA_Init</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[116]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[bc]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Write_Flash
</UL>

<P><STRONG><a name="[c0]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Write_Flash
</UL>

<P><STRONG><a name="[bf]"></a>HAL_FLASH_Program</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Write_Flash
</UL>

<P><STRONG><a name="[ba]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Write_Flash
</UL>

<P><STRONG><a name="[11f]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 980 bytes, Stack size 40 bytes, stm32f4xx_mc_it.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; HALL_GetPhase2
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase1
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HALL_GetPhase2
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 552 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[108]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase2
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_GetPhase1
</UL>

<P><STRONG><a name="[d5]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayErrorLed_Handle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSet
</UL>

<P><STRONG><a name="[d6]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayErrorLed_Handle
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDSet
</UL>

<P><STRONG><a name="[ea]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Transmit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_EN_OFF
</UL>

<P><STRONG><a name="[120]"></a>HAL_IWDG_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
</UL>

<P><STRONG><a name="[217]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[219]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[121]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_MspInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[167]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_to_APP
</UL>

<P><STRONG><a name="[105]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL2_Init_Electrical_Angle
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL1_Init_Electrical_Angle
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[104]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL2_Init_Electrical_Angle
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL1_Init_Electrical_Angle
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[122]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[129]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[128]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[12a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[127]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[12b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1142 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[21b]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12d]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[12c]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[227]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[136]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[137]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Encoder_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIM_SlaveConfigSynchro</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_SlaveConfigSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_SlaveConfigSynchro &rArr; TIM_SlaveTimer_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[145]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DEBUG_USART_Init
</UL>

<P><STRONG><a name="[14c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, bsp_debug_usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[14f]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DEBUG_USART_Init
</UL>

<P><STRONG><a name="[23c]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[23d]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[150]"></a>HAL_UART_Transmit</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[152]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
</UL>

<P><STRONG><a name="[23e]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[23f]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[23]"></a>HardFault_Handler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardFault_Handler &rArr; UFCP_RX_IRQ_Handler &rArr; UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStop
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SerialCommunicationTimeOutStart
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_TX_IRQ_Handler
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[273]"></a>HardVersion_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_app_function.o(i.HardVersion_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>HeartBeat_Message_Handle</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, canopen_lifegrd.o(i.HeartBeat_Message_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HeartBeat_Message_Handle &rArr; CAN2_Send_Msg &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>

<P><STRONG><a name="[15c]"></a>Independent_Motor_Control</STRONG> (Thumb, 1674 bytes, Stack size 48 bytes, bsp_app_function.o(i.Independent_Motor_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Independent_Motor_Control &rArr; MC_ProgramPositionCommandMotor2 &rArr; MCI_ExecPositionCommand &rArr; TC_FollowCommand &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramTorqueRampMotor2
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramTorqueRampMotor1
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramSpeedRampMotor2
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramSpeedRampMotor1
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramPositionCommandMotor2
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramPositionCommandMotor1
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetCurrentPosition2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetCurrentPosition1
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedSetMerge_two_to_one
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[166]"></a>Jump_to_APP</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_ota.o(i.Jump_to_APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Jump_to_APP
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_Index200B_Subindex0
</UL>

<P><STRONG><a name="[d7]"></a>LEDSet</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, bsp_app_function.o(i.LEDSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LEDSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayErrorLed_Handle
</UL>

<P><STRONG><a name="[1b1]"></a>LoadCurrentInit</STRONG> (Thumb, 272 bytes, Stack size 36 bytes, mc_tasks.o(i.LoadCurrentInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LoadCurrentInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[168]"></a>LoadFlashParams</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_flash.o(i.LoadFlashParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoadFlashParams &rArr; Atlas_Read_Flash
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Read_Flash
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[169]"></a>M1M2_Initial_Position</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, bsp_app_function.o(i.M1M2_Initial_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M1M2_Initial_Position &rArr; MC_StartMotor2 &rArr; MCI_StartMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor2
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetCurrentPosition2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetCurrentPosition1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[16e]"></a>MCI_Clear_Iqdref</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mc_interface.o(i.MCI_Clear_Iqdref))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCI_Clear_Iqdref &rArr; STC_GetDefaultIqdref
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[170]"></a>MCI_EncoderAlign</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_EncoderAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_EncoderAlign &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[172]"></a>MCI_ExecBufferedCommands</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_ExecBufferedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCI_ExecBufferedCommands &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[173]"></a>MCI_ExecPositionCommand</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mc_interface.o(i.MCI_ExecPositionCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MCI_ExecPositionCommand &rArr; TC_FollowCommand &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_MoveCommand
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowCommand
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetMecAngle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecPositionCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramPositionCommandMotor2
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramPositionCommandMotor1
</UL>

<P><STRONG><a name="[193]"></a>MCI_ExecSpeedRamp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_ExecSpeedRamp))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecSpeedRamp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramSpeedRampMotor2
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramSpeedRampMotor1
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[194]"></a>MCI_ExecTorqueRamp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_ExecTorqueRamp))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecTorqueRamp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramTorqueRampMotor2
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramTorqueRampMotor1
</UL>

<P><STRONG><a name="[177]"></a>MCI_FaultAcknowledged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_FaultAcknowledged))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultAcknowledged
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[179]"></a>MCI_GetAvrgMecSpeedUnit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_GetAvrgMecSpeedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_GetAvrgMecSpeedUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[249]"></a>MCI_GetControlMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[17b]"></a>MCI_GetCurrentPosition</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetCurrentPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_GetCurrentPosition &rArr; TC_GetCurrentPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_GetCurrentPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetCurrentPosition2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_GetCurrentPosition1
</UL>

<P><STRONG><a name="[255]"></a>MCI_GetIab</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIab))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[256]"></a>MCI_GetIalphabeta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIalphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[253]"></a>MCI_GetIqd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIqd))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[248]"></a>MCI_GetIqdref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetIqdref))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[24a]"></a>MCI_GetLastRampFinalSpeed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetLastRampFinalSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[17d]"></a>MCI_GetMecSpeedRefUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetMecSpeedRefUnit))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRefUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[17f]"></a>MCI_GetSTMState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetSTMState))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[261]"></a>MCI_GetTeref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetTeref))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[258]"></a>MCI_GetValphabeta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetValphabeta))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[257]"></a>MCI_GetVqd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_GetVqd))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[1ac]"></a>MCI_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[25c]"></a>MCI_SetCurrentReferences</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, mc_interface.o(i.MCI_SetCurrentReferences))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MCI_SetCurrentReferences
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetCurrentReferences
</UL>

<P><STRONG><a name="[262]"></a>MCI_SetIdref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_SetIdref))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[181]"></a>MCI_StartMotor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mc_interface.o(i.MCI_StartMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCI_StartMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor2
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
</UL>

<P><STRONG><a name="[182]"></a>MCI_StopMotor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_StopMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
</UL>

<P><STRONG><a name="[183]"></a>MCI_StopRamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_interface.o(i.MCI_StopRamp))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_StopRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>

<P><STRONG><a name="[f8]"></a>MCM_Clarke</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, mc_math.o(i.MCM_Clarke))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MCM_Clarke
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[f9]"></a>MCM_Park</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, mc_math.o(i.MCM_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MCM_Park &rArr; MCM_Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[ff]"></a>MCM_Rev_Park</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mc_math.o(i.MCM_Rev_Park))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MCM_Rev_Park &rArr; MCM_Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[185]"></a>MCM_Trig_Functions</STRONG> (Thumb, 132 bytes, Stack size 4 bytes, mc_math.o(i.MCM_Trig_Functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReferenceInjection
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
</UL>

<P><STRONG><a name="[186]"></a>MCP_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, motor_control_protocol.o(i.MCP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MCP_Init &rArr; MCP_WaitNextFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_WaitNextFrame
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_SetClient
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[86]"></a>MCP_OnTimeOut</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motor_control_protocol.o(i.MCP_OnTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCP_OnTimeOut &rArr; MCP_WaitNextFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_WaitNextFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[87]"></a>MCP_ReceivedFrame</STRONG> (Thumb, 1770 bytes, Stack size 64 bytes, motor_control_protocol.o(i.MCP_ReceivedFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MCP_ReceivedFrame &rArr; UI_ExecPositionCmd &rArr; MCI_ExecPositionCommand &rArr; TC_FollowCommand &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetCurrentReferences
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetMPInfo
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecTorqueRamp
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecSpeedRamp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecPositionCmd
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_ExecCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[88]"></a>MCP_SentFrame</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motor_control_protocol.o(i.MCP_SentFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCP_SentFrame &rArr; MCP_WaitNextFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_WaitNextFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor_control_protocol.o(i.MCP_Init)
</UL>
<P><STRONG><a name="[188]"></a>MCP_WaitNextFrame</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, motor_control_protocol.o(i.MCP_WaitNextFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCP_WaitNextFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_SentFrame
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_OnTimeOut
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_Init
</UL>

<P><STRONG><a name="[da]"></a>MC_ClearFault</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_app_function.o(i.MC_ClearFault))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_error
</UL>

<P><STRONG><a name="[161]"></a>MC_GetCurrentPosition1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_GetCurrentPosition1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_GetCurrentPosition1 &rArr; MCI_GetCurrentPosition &rArr; TC_GetCurrentPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M2_Initial_Position
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Independent_Motor_Control
</UL>

<P><STRONG><a name="[163]"></a>MC_GetCurrentPosition2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_GetCurrentPosition2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_GetCurrentPosition2 &rArr; MCI_GetCurrentPosition &rArr; TC_GetCurrentPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M2_Initial_Position
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Independent_Motor_Control
</UL>

<P><STRONG><a name="[15e]"></a>MC_ProgramPositionCommandMotor1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_ProgramPositionCommandMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MC_ProgramPositionCommandMotor1 &rArr; MCI_ExecPositionCommand &rArr; TC_FollowCommand &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecPositionCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Independent_Motor_Control
</UL>

<P><STRONG><a name="[15f]"></a>MC_ProgramPositionCommandMotor2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_ProgramPositionCommandMotor2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MC_ProgramPositionCommandMotor2 &rArr; MCI_ExecPositionCommand &rArr; TC_FollowCommand &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecPositionCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Independent_Motor_Control
</UL>

<P><STRONG><a name="[160]"></a>MC_ProgramSpeedRampMotor1</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mc_api.o(i.MC_ProgramSpeedRampMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_ProgramSpeedRampMotor1
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Independent_Motor_Control
</UL>

<P><STRONG><a name="[162]"></a>MC_ProgramSpeedRampMotor2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mc_api.o(i.MC_ProgramSpeedRampMotor2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_ProgramSpeedRampMotor2
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Independent_Motor_Control
</UL>

<P><STRONG><a name="[164]"></a>MC_ProgramTorqueRampMotor1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_api.o(i.MC_ProgramTorqueRampMotor1))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Independent_Motor_Control
</UL>

<P><STRONG><a name="[165]"></a>MC_ProgramTorqueRampMotor2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_api.o(i.MC_ProgramTorqueRampMotor2))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Independent_Motor_Control
</UL>

<P><STRONG><a name="[195]"></a>MC_RunMotorControlTasks</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mc_tasks.o(i.MC_RunMotorControlTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = MC_RunMotorControlTasks &rArr; MC_Scheduler &rArr; Independent_Motor_Control &rArr; MC_ProgramPositionCommandMotor2 &rArr; MCI_ExecPositionCommand &rArr; TC_FollowCommand &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[196]"></a>MC_Scheduler</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, mc_tasks.o(i.MC_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MC_Scheduler &rArr; Independent_Motor_Control &rArr; MC_ProgramPositionCommandMotor2 &rArr; MCI_ExecPositionCommand &rArr; TC_FollowCommand &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedRelMerge_two_to_one
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Independent_Motor_Control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emrgency_Stop
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAngle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisVelocityPLLCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[d9]"></a>MC_SetFault</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_app_function.o(i.MC_SetFault))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_error
</UL>

<P><STRONG><a name="[16b]"></a>MC_StartMotor1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_StartMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MC_StartMotor1 &rArr; MCI_StartMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProceedDriveStateChange
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M2_Initial_Position
</UL>

<P><STRONG><a name="[16d]"></a>MC_StartMotor2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_StartMotor2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MC_StartMotor2 &rArr; MCI_StartMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProceedDriveStateChange
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M2_Initial_Position
</UL>

<P><STRONG><a name="[16a]"></a>MC_StopMotor1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_StopMotor1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_StopMotor1 &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProceedDriverHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M2_Initial_Position
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heartbeatError
</UL>

<P><STRONG><a name="[16c]"></a>MC_StopMotor2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mc_api.o(i.MC_StopMotor2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MC_StopMotor2 &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProceedDriverHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M2_Initial_Position
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_heartbeatError
</UL>

<P><STRONG><a name="[19d]"></a>MCboot</STRONG> (Thumb, 1144 bytes, Stack size 56 bytes, mc_tasks.o(i.MCboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MCboot &rArr; LoadCurrentInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startTimers
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VVBS_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMecSpeedRefUnitDefault
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetDefaultIqdref
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReferenceInjectionLoopPar_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMNG_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_HandleInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadFlashParams
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DOUT_SetOutputState
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_LoadDefaultPar
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorParametersM2_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorParametersM1_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadCurrentInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisVelocityPLLCalcInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[1e1]"></a>MPM_CalcElMotorPower</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, motor_power_measurement.o(i.MPM_CalcElMotorPower))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
</UL>

<P><STRONG><a name="[22d]"></a>MPM_Clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, motor_power_measurement.o(i.MPM_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[24d]"></a>MPM_GetAvrgElMotorPowerW</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_power_measurement.o(i.MPM_GetAvrgElMotorPowerW))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[1b9]"></a>MX_CAN2_Init</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, bsp_can.o(i.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>MX_DEBUG_USART_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_debug_usart.o(i.MX_DEBUG_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_DEBUG_USART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[271]"></a>MX_DMA_Init</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, bsp_debug_usart.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MX_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>MX_MotorControl_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, motorcontrol.o(i.MX_MotorControl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_MotorControl_Init &rArr; MCboot &rArr; LoadCurrentInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_lock_pins
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[205]"></a>Maxon_Communicate_clr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_usart1.o(i.Maxon_Communicate_clr))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Monitor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Error_Response
</UL>

<P><STRONG><a name="[267]"></a>Maxon_Sci_COM_Send</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, bsp_usart1.o(i.Maxon_Sci_COM_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Maxon_Sci_COM_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Error_Response
</UL>

<P><STRONG><a name="[110]"></a>MessageType_Check</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, canopen_nmt.o(i.MessageType_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Manager_Handle
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeat_Message_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Data_T0_Canopen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxCpltCallback
</UL>

<P><STRONG><a name="[1b2]"></a>MotorParametersM1_Init</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, mc_tasks.o(i.MotorParametersM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotorParametersM1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[1b3]"></a>MotorParametersM2_Init</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, mc_tasks.o(i.MotorParametersM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotorParametersM2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[1cc]"></a>MotorStuckCheck</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, bsp_app_function.o(i.MotorStuckCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MotorStuckCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in32abs
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[1cd]"></a>Motor_EN_OFF</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, usart_labview.o(i.Motor_EN_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_EN_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
</UL>

<P><STRONG><a name="[e9]"></a>Motor_Enable</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, bsp_app_function.o(i.Motor_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Emrgency_Stop
</UL>

<P><STRONG><a name="[23a]"></a>Motor_Over_Temperature</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, bsp_app_function.o(i.Motor_Over_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Motor_Over_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[1ce]"></a>NTC_CalcAvTemp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ntc_temperature_sensor.o(i.NTC_CalcAvTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NTC_CalcAvTemp &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[1d1]"></a>NTC_Clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(i.NTC_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
</UL>

<P><STRONG><a name="[236]"></a>NTC_GetAvTemp_C</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, ntc_temperature_sensor.o(i.NTC_GetAvTemp_C))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[1a9]"></a>NTC_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ntc_temperature_sensor.o(i.NTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NTC_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[1c8]"></a>Net_Manager_Handle</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, canopen_nmt.o(i.Net_Manager_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNodeId
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetState
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>

<P><STRONG><a name="[e]"></a>ODCallback_t_Index1010_Subindex1</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, canopen_od.o(i.ODCallback_t_Index1010_Subindex1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ODCallback_t_Index1010_Subindex1 &rArr; Atlas_Write_Flash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Write_Flash
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>ODCallback_t_Index1016_Subindex</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, canopen_lifegrd.o(i.ODCallback_t_Index1016_Subindex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ODCallback_t_Index1016_Subindex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>ODCallback_t_Index200B_Subindex0</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, canopen_od.o(i.ODCallback_t_Index200B_Subindex0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ODCallback_t_Index200B_Subindex0 &rArr; Jump_to_APP
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump_to_APP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ODCallback_t_Index2011_Subindex0</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, canopen_od.o(i.ODCallback_t_Index2011_Subindex0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ODCallback_t_Index2011_Subindex0 &rArr; SetNodeId
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetNodeId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ODCallback_t_Index2012_Subindex0</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, canopen_od.o(i.ODCallback_t_Index2012_Subindex0))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>ODCallback_t_Index3001_Subindex0</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, canopen_od.o(i.ODCallback_t_Index3001_Subindex0))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>ODCallback_t_RPDO_Communicate</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, canopen_pdo.o(i.ODCallback_t_RPDO_Communicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ODCallback_t_RPDO_Communicate
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>ODCallback_t_RPDO_Map</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, canopen_pdo.o(i.ODCallback_t_RPDO_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ODCallback_t_RPDO_Map
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjDict_Get_Id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>ODCallback_t_RPDO_MapSubindex0</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, canopen_pdo.o(i.ODCallback_t_RPDO_MapSubindex0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ODCallback_t_RPDO_MapSubindex0
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>ODCallback_t_TPDO_Communicate</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, canopen_pdo.o(i.ODCallback_t_TPDO_Communicate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ODCallback_t_TPDO_Communicate &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>ODCallback_t_TPDO_Map</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, canopen_pdo.o(i.ODCallback_t_TPDO_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ODCallback_t_TPDO_Map
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjDict_Get_Id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>ODCallback_t_TPDO_MapSubindex0</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, canopen_pdo.o(i.ODCallback_t_TPDO_MapSubindex0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ODCallback_t_TPDO_MapSubindex0
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[1da]"></a>OD_Index_san</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canopen_objacces.o(i.OD_Index_san))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OD_Index_san
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetOnDentry_Callback
</UL>

<P><STRONG><a name="[1d5]"></a>ObjDict_Get_Id</STRONG> (Thumb, 1552 bytes, Stack size 0 bytes, canopen_od.o(i.ObjDict_Get_Id))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPDO_Direct_Trans_Init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_Map
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_RPDO_Map
</UL>

<P><STRONG><a name="[1b]"></a>ObjDict_scanIndexOD</STRONG> (Thumb, 1676 bytes, Stack size 12 bytes, canopen_od.o(i.ObjDict_scanIndexOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ObjDict_scanIndexOD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>ObjDict_valueRangeTest</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canopen_od.o(i.ObjDict_valueRangeTest))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>OnHeartbeatProducerUpdate</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, canopen_lifegrd.o(i.OnHeartbeatProducerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OnHeartbeatProducerUpdate &rArr; heartbeatInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_lifegrd.o(i.heartbeatInit)
</UL>
<P><STRONG><a name="[94]"></a>OnNumberOfErrorsUpdate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, canopen_emcy.o(i.OnNumberOfErrorsUpdate))
<BR>[Address Reference Count : 1]<UL><LI> canopen_emcy.o(i.emergencyInit)
</UL>
<P><STRONG><a name="[237]"></a>OverLoadCurrentCheck</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, mc_tasks.o(i.OverLoadCurrentCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OverLoadCurrentCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[97]"></a>PDOEventTimerAlarm</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, canopen_pdo.o(i.PDOEventTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_TPDO_Communicate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_pdo.o(i.sendOnePDOevent)
</UL>
<P><STRONG><a name="[98]"></a>PDOInhibitTimerAlarm</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, canopen_pdo.o(i.PDOInhibitTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PDOInhibitTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_pdo.o(i.sendOnePDOevent)
</UL>
<P><STRONG><a name="[1d9]"></a>PDOInit</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, canopen_pdo.o(i.PDOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPDO_Direct_Trans_Init
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_Index_san
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[1dd]"></a>PDOStop</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, canopen_pdo.o(i.PDOStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PDOStop
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[1de]"></a>PID_Controller</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, pid_regulator.o(i.PID_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PID_Controller &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_PositionRegulation
</UL>

<P><STRONG><a name="[247]"></a>PID_GetKD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKD))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[246]"></a>PID_GetKI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKI))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[24c]"></a>PID_GetKIDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKIDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[245]"></a>PID_GetKP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKP))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[24b]"></a>PID_GetKPDivisor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_GetKPDivisor))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[1a1]"></a>PID_HandleInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_HandleInit))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[ef]"></a>PID_SetIntegralTerm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetIntegralTerm))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_Clear
</UL>

<P><STRONG><a name="[260]"></a>PID_SetKD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKD))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[25f]"></a>PID_SetKI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKI))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[25e]"></a>PID_SetKP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid_regulator.o(i.PID_SetKP))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[fb]"></a>PI_Controller</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, pid_regulator.o(i.PI_Controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller
</UL>

<P><STRONG><a name="[1df]"></a>PQD_CalcElMotorPower</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, pqd_motor_power_measurement.o(i.PQD_CalcElMotorPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PQD_CalcElMotorPower
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_CalcElMotorPower
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[238]"></a>PWMC_CheckOverCurrent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_CheckOverCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[1e2]"></a>PWMC_CurrentReadingCalibr</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pwm_curr_fdbk.o(i.PWMC_CurrentReadingCalibr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMC_CurrentReadingCalibr
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[f7]"></a>PWMC_GetPhaseCurrents</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_GetPhaseCurrents))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[100]"></a>PWMC_SetPhaseVoltage</STRONG> (Thumb, 576 bytes, Stack size 16 bytes, pwm_curr_fdbk.o(i.PWMC_SetPhaseVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWMC_SetPhaseVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[f1]"></a>PWMC_SwitchOffPWM</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pwm_curr_fdbk.o(i.PWMC_SwitchOffPWM))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
</UL>

<P><STRONG><a name="[1e3]"></a>Par_402_Init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ds402.o(i.Par_402_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Par_402_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e5]"></a>PendingOptionCode</STRONG> (Thumb, 196 bytes, Stack size 36 bytes, ds402.o(i.PendingOptionCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PendingOptionCode &rArr; CiA402_TransitionAction
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CiA402_TransitionAction
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[206]"></a>Pop_Down_stack</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_usart1.o(i.Pop_Down_stack))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Stack_Monitor
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Monitor
</UL>

<P><STRONG><a name="[1e7]"></a>ProceedDriveStateChange</STRONG> (Thumb, 888 bytes, Stack size 40 bytes, ds402.o(i.ProceedDriveStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProceedDriveStateChange &rArr; MC_StartMotor2 &rArr; MCI_StartMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor2
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StartMotor1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e8]"></a>ProceedDriverHandler</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ds402.o(i.ProceedDriverHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProceedDriverHandler &rArr; MC_StopMotor2 &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[96]"></a>ProducerHeartbeatAlarm</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, canopen_lifegrd.o(i.ProducerHeartbeatAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ProducerHeartbeatAlarm &rArr; CAN2_Send_Msg &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_lifegrd.o(i.heartbeatInit)
</UL>
<P><STRONG><a name="[272]"></a>Program_Version_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_app_function.o(i.Program_Version_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[221]"></a>R3_2_BRK_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_BRK_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[3]"></a>R3_2_CurrentReadingCalibration</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R3_2_CurrentReadingCalibration &rArr; waitForPolarizationEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOnPWM
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForPolarizationEnd
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>R3_2_GetPhaseCurrents</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_GetPhaseCurrents))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = R3_2_GetPhaseCurrents &rArr; DefaultPhaseCheck &rArr; BubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPhaseCheck
</UL>
<BR>[Address Reference Count : 4]<UL><LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
<LI> mc_config.o(.data)
<LI> mc_config.o(.data)
<LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[89]"></a>R3_2_HFCurrentsCalibrationAB</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_HFCurrentsCalibrationAB))
<BR>[Address Reference Count : 1]<UL><LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[8b]"></a>R3_2_HFCurrentsCalibrationC</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_HFCurrentsCalibrationC))
<BR>[Address Reference Count : 1]<UL><LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[19f]"></a>R3_2_Init</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R3_2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[6]"></a>R3_2_IsOverCurrentOccurred</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_IsOverCurrentOccurred))
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>R3_2_RLDetectionModeDisable</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_2_RLDetectionModeDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>R3_2_RLDetectionModeEnable</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R3_2_RLDetectionModeEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>R3_2_RLDetectionModeSetDuty</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeSetDuty))
<BR>[Address Reference Count : 2]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>R3_2_SetADCSampPointCalibration</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SetADCSampPointCalibration))
<BR>[Address Reference Count : 1]<UL><LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[5]"></a>R3_2_SetADCSampPointSectX</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SetADCSampPointSectX))
<BR>[Address Reference Count : 3]<UL><LI> mc_config.o(.data)
<LI> mc_config.o(.data)
<LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_CurrentReadingCalibration)
</UL>
<P><STRONG><a name="[1]"></a>R3_2_SwitchOffPWM</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOffPWM))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_CurrentReadingCalibration
</UL>
<BR>[Address Reference Count : 4]<UL><LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
<LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
<LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>R3_2_SwitchOnPWM</STRONG> (Thumb, 186 bytes, Stack size 4 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_SwitchOnPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R3_2_SwitchOnPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_CurrentReadingCalibration
</UL>
<BR>[Address Reference Count : 3]<UL><LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
<LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[222]"></a>R3_2_TIMx_UP_IRQHandler</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_TIMx_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R3_2_TIMx_UP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>R3_2_TurnOnLowSides</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_TurnOnLowSides))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>
<BR>[Address Reference Count : 3]<UL><LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeDisable)
<LI> mc_config.o(.data)
<LI> mc_config.o(.data)
</UL>
<P><STRONG><a name="[1cf]"></a>RCM_ExecRegularConv</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, regular_conversion_manager.o(i.RCM_ExecRegularConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
</UL>

<P><STRONG><a name="[1eb]"></a>RCM_ExecUserConv</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, regular_conversion_manager.o(i.RCM_ExecUserConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCM_ExecUserConv &rArr; RCM_ExecRegularConv
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
</UL>

<P><STRONG><a name="[1d0]"></a>RCM_RegisterRegConv</STRONG> (Thumb, 252 bytes, Stack size 12 bytes, regular_conversion_manager.o(i.RCM_RegisterRegConv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCM_RegisterRegConv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Init
</UL>

<P><STRONG><a name="[1ab]"></a>REMNG_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ramp_ext_mngr.o(i.REMNG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[1ec]"></a>RPDO_Direct_SetODentry</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, canopen_pdo.o(i.RPDO_Direct_SetODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RPDO_Direct_SetODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RPOD_SyncEvent
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[1db]"></a>RPDO_Direct_Trans_Init</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, canopen_pdo.o(i.RPDO_Direct_Trans_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RPDO_Direct_Trans_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ObjDict_Get_Id
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>

<P><STRONG><a name="[254]"></a>RUC_GetNumberOfPhases</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetNumberOfPhases))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[259]"></a>RUC_GetPhaseDurationms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetPhaseDurationms))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[25a]"></a>RUC_GetPhaseFinalMecSpeedUnit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetPhaseFinalMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[25b]"></a>RUC_GetPhaseFinalTorque</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_GetPhaseFinalTorque))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetRevupData
</UL>

<P><STRONG><a name="[263]"></a>RUC_SetPhaseDurationms</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_SetPhaseDurationms))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[264]"></a>RUC_SetPhaseFinalMecSpeedUnit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_SetPhaseFinalMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[265]"></a>RUC_SetPhaseFinalTorque</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, revup_ctrl.o(i.RUC_SetPhaseFinalTorque))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetRevupData
</UL>

<P><STRONG><a name="[1ed]"></a>RVBS_CalcAvVbus</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_CalcAvVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RVBS_CalcAvVbus &rArr; RVBS_CheckFaultState &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecRegularConv
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CheckFaultState
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[1ee]"></a>RVBS_CheckFaultState</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_CheckFaultState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RVBS_CheckFaultState &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
</UL>

<P><STRONG><a name="[1f1]"></a>RVBS_Clear</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Init
</UL>

<P><STRONG><a name="[1a7]"></a>RVBS_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, r_divider_bus_voltage_sensor.o(i.RVBS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RVBS_Init &rArr; RCM_RegisterRegConv
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_RegisterRegConv
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[fa]"></a>ReferenceInjection</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, bsp_app_function.o(i.ReferenceInjection))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReferenceInjection &rArr; MCM_Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Trig_Functions
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[1b4]"></a>ReferenceInjectionLoopPar_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp_app_function.o(i.ReferenceInjectionLoopPar_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[1f2]"></a>RegisterSetOnDentry_Callback</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, canopen_objacces.o(i.RegisterSetOnDentry_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegisterSetOnDentry_Callback &rArr; OD_Index_san
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OD_Index_san
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSync
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>

<P><STRONG><a name="[8f]"></a>SDOTimeoutAlarm</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, canopen_sdo.o(i.SDOTimeoutAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDOTimeoutAlarm &rArr; SDO_Err_Record &rArr; SendSDO &rArr; CAN2_Send_Msg &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Err_Record
</UL>
<BR>[Address Reference Count : 2]<UL><LI> canopen_sdo.o(i.SDO_Email_Handler)
<LI> canopen_sdo.o(i.initSDOline)
</UL>
<P><STRONG><a name="[1cb]"></a>SDO_Email_Handler</STRONG> (Thumb, 1910 bytes, Stack size 64 bytes, canopen_sdo.o(i.SDO_Email_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SDO_Email_Handler &rArr; failedSDO &rArr; SDO_Err_Record &rArr; SendSDO &rArr; CAN2_Send_Msg &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSDOlineRestBytes
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineToSDO
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineRestBytes
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSDO
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>

<P><STRONG><a name="[1f3]"></a>SDO_Err_Record</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, canopen_sdo.o(i.SDO_Err_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SDO_Err_Record &rArr; SendSDO &rArr; CAN2_Send_Msg &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[1f9]"></a>SDOlineToObjdict</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, canopen_sdo.o(i.SDOlineToObjdict))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDOlineToObjdict &rArr; _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[1f7]"></a>SDOtoLine</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, canopen_sdo.o(i.SDOtoLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDOtoLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[17a]"></a>SPD_GetAvrgMecSpeedUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetAvrgMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_CalcTorqueReference
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[f6]"></a>SPD_GetElAngle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetElAngle))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[fe]"></a>SPD_GetInstElSpeedDpp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetInstElSpeedDpp))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>

<P><STRONG><a name="[174]"></a>SPD_GetMecAngle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetMecAngle))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_GetCurrentPosition
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowCommand
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_PositionRegulation
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecPositionCommand
</UL>

<P><STRONG><a name="[24e]"></a>SPD_GetS16Speed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, speed_pos_fdbk.o(i.SPD_GetS16Speed))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[e6]"></a>SPD_IsMecSpeedReliable</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, speed_pos_fdbk.o(i.SPD_IsMecSpeedReliable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPD_IsMecSpeedReliable
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAvrgMecSpeedUnit
</UL>

<P><STRONG><a name="[ed]"></a>STC_CalcTorqueReference</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, speed_torq_ctrl.o(i.STC_CalcTorqueReference))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = STC_CalcTorqueReference &rArr; PI_Controller
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
</UL>

<P><STRONG><a name="[f0]"></a>STC_Clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetIntegralTerm
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
</UL>

<P><STRONG><a name="[e4]"></a>STC_ExecRamp</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, speed_torq_ctrl.o(i.STC_ExecRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetTorqueRef
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_PositionRegulation
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[201]"></a>STC_ForceSpeedReferenceToCurrentSpeed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, speed_torq_ctrl.o(i.STC_ForceSpeedReferenceToCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_ForceSpeedReferenceToCurrentSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[16f]"></a>STC_GetDefaultIqdref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, speed_torq_ctrl.o(i.STC_GetDefaultIqdref))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STC_GetDefaultIqdref
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[251]"></a>STC_GetMaxAppPositiveMecSpeedUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMaxAppPositiveMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[17e]"></a>STC_GetMecSpeedRefUnit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMecSpeedRefUnit))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
</UL>

<P><STRONG><a name="[1ad]"></a>STC_GetMecSpeedRefUnitDefault</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMecSpeedRefUnitDefault))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[252]"></a>STC_GetMinAppNegativeMecSpeedUnit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetMinAppNegativeMecSpeedUnit))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[f5]"></a>STC_GetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_GetCurrentPosition
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowCommand
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_PositionRegulation
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecPositionCommand
</UL>

<P><STRONG><a name="[200]"></a>STC_GetTorqueRef</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_GetTorqueRef))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
</UL>

<P><STRONG><a name="[1a5]"></a>STC_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[e3]"></a>STC_SetControlMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetControlMode))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_PositionRegulation
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[22c]"></a>STC_SetSpeedSensor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_SetSpeedSensor))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[184]"></a>STC_StopRamp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, speed_torq_ctrl.o(i.STC_StopRamp))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopRamp
</UL>

<P><STRONG><a name="[178]"></a>STM_FaultAcknowledged</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, state_machine.o(i.STM_FaultAcknowledged))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
</UL>

<P><STRONG><a name="[202]"></a>STM_FaultProcessing</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, state_machine.o(i.STM_FaultProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HardwareFaultTask
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
</UL>

<P><STRONG><a name="[244]"></a>STM_GetFaultState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state_machine.o(i.STM_GetFaultState))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[180]"></a>STM_GetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, state_machine.o(i.STM_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
</UL>

<P><STRONG><a name="[19e]"></a>STM_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state_machine.o(i.STM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[171]"></a>STM_NextState</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, state_machine.o(i.STM_NextState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EncoderAlign
</UL>

<P><STRONG><a name="[203]"></a>Sci_Monitor</STRONG> (Thumb, 184 bytes, Stack size 12 bytes, bsp_usart1.o(i.Sci_Monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sci_Monitor &rArr; Usart3_Error_Response &rArr; CRC16_creat &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Error_Response
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_STACK_CLR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop_Down_stack
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Maxon_Communicate_clr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[208]"></a>Sci_Stack_Monitor</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, bsp_usart1.o(i.Sci_Stack_Monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Sci_Stack_Monitor &rArr; Usart3_Data_T0_Canopen &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart3_Data_T0_Canopen
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_STACK_CLR
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop_Down_stack
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[20a]"></a>SendBootUp</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, canopen_nmt.o(i.SendBootUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendBootUp &rArr; CAN2_Send_Msg &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[1f8]"></a>SendSDO</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, canopen_sdo.o(i.SendSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SendSDO &rArr; CAN2_Send_Msg &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Err_Record
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[15b]"></a>SetAlarm</STRONG> (Thumb, 136 bytes, Stack size 36 bytes, canopen_timer.o(i.SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeat_Message_Handle
</UL>

<P><STRONG><a name="[cc]"></a>SetNodeId</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, canopen_nmt.o(i.SetNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Parameter_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Manager_Handle
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_Index2011_Subindex0
</UL>

<P><STRONG><a name="[cd]"></a>SetState</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, canopen_nmt.o(i.SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Parameter_Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Manager_Handle
</UL>

<P><STRONG><a name="[1d4]"></a>SoftReset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_ota.o(i.SoftReset))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_Index200B_Subindex0
</UL>

<P><STRONG><a name="[19a]"></a>SpeedRelMerge_two_to_one</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_app_function.o(i.SpeedRelMerge_two_to_one))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[15d]"></a>SpeedSetMerge_two_to_one</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, bsp_app_function.o(i.SpeedSetMerge_two_to_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SpeedSetMerge_two_to_one
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Independent_Motor_Control
</UL>

<P><STRONG><a name="[20e]"></a>StallCheck</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, bsp_app_function.o(i.StallCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StallCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in32abs
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
</UL>

<P><STRONG><a name="[20f]"></a>StopSync</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, canopen_sync.o(i.StopSync))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StopSync &rArr; RegisterSetOnDentry_Callback &rArr; OD_Index_san
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetOnDentry_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[20d]"></a>SwitchCommunication_State</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, canopen_nmt.o(i.SwitchCommunication_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSync
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBootUp
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetState
</UL>

<P><STRONG><a name="[268]"></a>Switch_Motor_Operation_Mode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart_labview.o(i.Switch_Motor_Operation_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
</UL>

<P><STRONG><a name="[2a]"></a>SysTick_Handler</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SysTick_Handler &rArr; Sci_Stack_Monitor &rArr; Usart3_Data_T0_Canopen &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Stack_Monitor
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Monitor
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProceedDriverHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProceedDriveStateChange
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendingOptionCode
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M1M2_Initial_Position
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_error
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayErrorLed_Handle
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Damping_Of_Motor
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Brake_Filters_Cnt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21a]"></a>SystemClock_Config</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>SystemInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[176]"></a>TC_FollowCommand</STRONG> (Thumb, 968 bytes, Stack size 64 bytes, trajectory_ctrl.o(i.TC_FollowCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TC_FollowCommand &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetMecAngle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecPositionCommand
</UL>

<P><STRONG><a name="[21c]"></a>TC_FollowExecution</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trajectory_ctrl.o(i.TC_FollowExecution))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_TrapezoidalVelocityPlanning
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_PositionRegulation
</UL>

<P><STRONG><a name="[17c]"></a>TC_GetCurrentPosition</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, trajectory_ctrl.o(i.TC_GetCurrentPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TC_GetCurrentPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetMecAngle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCurrentPosition
</UL>

<P><STRONG><a name="[250]"></a>TC_GetMoveDuration</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trajectory_ctrl.o(i.TC_GetMoveDuration))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[24f]"></a>TC_GetTargetPosition</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trajectory_ctrl.o(i.TC_GetTargetPosition))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[1a4]"></a>TC_Init</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, trajectory_ctrl.o(i.TC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[175]"></a>TC_MoveCommand</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, trajectory_ctrl.o(i.TC_MoveCommand))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecPositionCommand
</UL>

<P><STRONG><a name="[21e]"></a>TC_MoveExecution</STRONG> (Thumb, 318 bytes, Stack size 4 bytes, trajectory_ctrl.o(i.TC_MoveExecution))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TC_MoveExecution
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_RampCompleted
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_PositionRegulation
</UL>

<P><STRONG><a name="[220]"></a>TC_PositionRegulation</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, trajectory_ctrl.o(i.TC_PositionRegulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TC_PositionRegulation &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ExecRamp
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetMecAngle
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Controller
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_MoveExecution
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowExecution
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[21f]"></a>TC_RampCompleted</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, trajectory_ctrl.o(i.TC_RampCompleted))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_MoveExecution
</UL>

<P><STRONG><a name="[21d]"></a>TC_TrapezoidalVelocityPlanning</STRONG> (Thumb, 608 bytes, Stack size 0 bytes, trajectory_ctrl.o(i.TC_TrapezoidalVelocityPlanning))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_FollowExecution
</UL>

<P><STRONG><a name="[43]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_mc_it.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_BRK_IRQHandler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; R3_2_TIMx_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_TIMx_UP_IRQHandler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_DualDriveFIFOUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_mc_it.o(i.TIM2_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM4_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32f4xx_mc_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM4_IRQHandler &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, canopen_timer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; TimerForCan &rArr; TimeDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerForCan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[226]"></a>TIM6_Init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, canopen_timer.o(i.TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_mc_it.o(i.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_BRK_IRQHandler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_mc_it.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; R3_2_TIMx_UP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_TIMx_UP_IRQHandler
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_DualDriveFIFOUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[132]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[13b]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[22a]"></a>TSK_ChargeBootCapDelayHasElapsedM1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_ChargeBootCapDelayHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[232]"></a>TSK_ChargeBootCapDelayHasElapsedM2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_ChargeBootCapDelayHasElapsedM2))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[223]"></a>TSK_DualDriveFIFOUpdate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_DualDriveFIFOUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>TSK_HardwareFaultTask</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mc_tasks.o(i.TSK_HardwareFaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TSK_HardwareFaultTask
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[b5]"></a>TSK_HighFrequencyTask</STRONG> (Thumb, 528 bytes, Stack size 96 bytes, mc_tasks.o(i.TSK_HighFrequencyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = TSK_HighFrequencyTask &rArr; FOC_CurrControllerM1 &rArr; MCM_Park &rArr; MCM_Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetInstElSpeedDpp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReferenceInjection
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetPhaseVoltage
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_GetPhaseCurrents
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Clarke
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAngle
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Limitation
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisVelocityPLLCalc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CurrControllerM1
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[19b]"></a>TSK_MediumFrequencyTaskM1</STRONG> (Thumb, 698 bytes, Stack size 16 bytes, mc_tasks.o(i.TSK_MediumFrequencyTaskM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TSK_MediumFrequencyTaskM1 &rArr; TC_PositionRegulation &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_StopPermanencyTimeHasElapsedM1
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetStopPermanencyTimeM1
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetChargeBootCapDelayM1
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ChargeBootCapDelayHasElapsedM1
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_PositionRegulation
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedRelMerge_two_to_one
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetSpeedSensor
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL1_Init_Electrical_Angle
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Clear
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAvrgMecSpeedUnit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetRestartState
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_TurnOnLowSides
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOnPWM
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[19c]"></a>TSK_MediumFrequencyTaskM2</STRONG> (Thumb, 760 bytes, Stack size 24 bytes, mc_tasks.o(i.TSK_MediumFrequencyTaskM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TSK_MediumFrequencyTaskM2 &rArr; TC_PositionRegulation &rArr; STC_ExecRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_StopPermanencyTimeHasElapsedM2
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetStopPermanencyTimeM2
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SetChargeBootCapDelayM2
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_ChargeBootCapDelayHasElapsedM2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_CalcCurrRef
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_PositionRegulation
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedRelMerge_two_to_one
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_NextState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetSpeedSensor
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_SetControlMode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_ForceSpeedReferenceToCurrentSpeed
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CurrentReadingCalibr
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecBufferedCommands
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL2_Init_Electrical_Angle
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_Clear
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC_CalcAvrgMecSpeedUnit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SetRestartState
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_GetRestartState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_Exec
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_TurnOnLowSides
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOnPWM
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_SwitchOffPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Scheduler
</UL>

<P><STRONG><a name="[197]"></a>TSK_SafetyTask</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mc_tasks.o(i.TSK_SafetyTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TSK_SafetyTask &rArr; TSK_SafetyTask_PWMOFF &rArr; RVBS_CalcAvVbus &rArr; RVBS_CheckFaultState &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask_PWMOFF
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCM_ExecUserConv
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_GetAvTemp_C
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[235]"></a>TSK_SafetyTask_PWMOFF</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, mc_tasks.o(i.TSK_SafetyTask_PWMOFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TSK_SafetyTask_PWMOFF &rArr; RVBS_CalcAvVbus &rArr; RVBS_CheckFaultState &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Clear
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StallCheck
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_FaultProcessing
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVBS_CalcAvVbus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SwitchOffPWM
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_CheckOverCurrent
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_CalcAvTemp
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Over_Temperature
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStuckCheck
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_Clear
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_SetRestartState
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPhaseCheckLinkFunction
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OverLoadCurrentCheck
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
</UL>

<P><STRONG><a name="[229]"></a>TSK_SetChargeBootCapDelayM1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetChargeBootCapDelayM1))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[231]"></a>TSK_SetChargeBootCapDelayM2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetChargeBootCapDelayM2))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[22e]"></a>TSK_SetStopPermanencyTimeM1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetStopPermanencyTimeM1))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[233]"></a>TSK_SetStopPermanencyTimeM2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_SetStopPermanencyTimeM2))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[22f]"></a>TSK_StopPermanencyTimeHasElapsedM1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_StopPermanencyTimeHasElapsedM1))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM1
</UL>

<P><STRONG><a name="[234]"></a>TSK_StopPermanencyTimeHasElapsedM2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mc_tasks.o(i.TSK_StopPermanencyTimeHasElapsedM2))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_MediumFrequencyTaskM2
</UL>

<P><STRONG><a name="[23b]"></a>TimeDispatch</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, canopen_timer.o(i.TimeDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimeDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerForCan
</UL>

<P><STRONG><a name="[225]"></a>TimerForCan</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, canopen_timer.o(i.TimerForCan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerForCan &rArr; TimeDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>UFCP_AbortReceive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_AbortReceive))
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[240]"></a>UFCP_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_Init))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[154]"></a>UFCP_OVR_IRQ_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_OVR_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UFCP_OVR_IRQ_Handler &rArr; UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[157]"></a>UFCP_RX_IRQ_Handler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, usart_frame_communication_protocol.o(i.UFCP_RX_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UFCP_RX_IRQ_Handler &rArr; UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Send
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[91]"></a>UFCP_Receive</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_Receive))
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[92]"></a>UFCP_Send</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usart_frame_communication_protocol.o(i.UFCP_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UFCP_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCP_CalcCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_RX_IRQ_Handler
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_OVR_IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui_task.o(i.UI_TaskInit)
</UL>
<P><STRONG><a name="[156]"></a>UFCP_TX_IRQ_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, usart_frame_communication_protocol.o(i.UFCP_TX_IRQ_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[18b]"></a>UI_ExecCmd</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, user_interface.o(i.UI_ExecCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UI_ExecCmd &rArr; MCI_Clear_Iqdref &rArr; STC_GetDefaultIqdref
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopRamp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StopMotor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_StartMotor
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetSTMState
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FaultAcknowledged
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_EncoderAlign
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Clear_Iqdref
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[18d]"></a>UI_ExecPositionCmd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, user_interface.o(i.UI_ExecPositionCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UI_ExecPositionCmd &rArr; MCI_ExecPositionCommand &rArr; TC_FollowCommand &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecPositionCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[18c]"></a>UI_ExecSpeedRamp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, user_interface.o(i.UI_ExecSpeedRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI_ExecSpeedRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[18e]"></a>UI_ExecTorqueRamp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, user_interface.o(i.UI_ExecTorqueRamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI_ExecTorqueRamp
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[192]"></a>UI_GetMPInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_interface.o(i.UI_GetMPInfo))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[18a]"></a>UI_GetReg</STRONG> (Thumb, 1152 bytes, Stack size 32 bytes, user_interface.o(i.UI_GetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UI_GetReg &rArr; TC_GetCurrentPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_GetTargetPosition
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_GetMoveDuration
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TC_GetCurrentPosition
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetFaultState
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VBS_GetAvBusVoltage_V
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM_GetState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_GetAvTemp_C
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetSelectedMC
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMinAppNegativeMecSpeedUnit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetMaxAppPositiveMecSpeedUnit
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetS16Speed
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetNumberOfPhases
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKPDivisor
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKP
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKIDivisor
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKI
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GetKD
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPM_GetAvrgElMotorPowerW
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetVqd
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetValphabeta
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetLastRampFinalSpeed
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqd
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIalphabeta
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIab
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetControlMode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetAvrgMecSpeedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[18f]"></a>UI_GetRevupData</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, user_interface.o(i.UI_GetRevupData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UI_GetRevupData
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseFinalTorque
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseFinalMecSpeedUnit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_GetPhaseDurationms
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[243]"></a>UI_GetSelectedMC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_interface.o(i.UI_GetSelectedMC))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[266]"></a>UI_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, user_interface.o(i.UI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_TaskInit
</UL>

<P><STRONG><a name="[198]"></a>UI_Scheduler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ui_task.o(i.UI_Scheduler))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_RunMotorControlTasks
</UL>

<P><STRONG><a name="[25d]"></a>UI_SelectMC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, user_interface.o(i.UI_SelectMC))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SetReg
</UL>

<P><STRONG><a name="[158]"></a>UI_SerialCommunicationTimeOutStart</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_task.o(i.UI_SerialCommunicationTimeOutStart))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[155]"></a>UI_SerialCommunicationTimeOutStop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ui_task.o(i.UI_SerialCommunicationTimeOutStop))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[191]"></a>UI_SetCurrentReferences</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, user_interface.o(i.UI_SetCurrentReferences))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UI_SetCurrentReferences &rArr; MCI_SetCurrentReferences
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCurrentReferences
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[189]"></a>UI_SetReg</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, user_interface.o(i.UI_SetReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UI_SetReg &rArr; MCI_SetCurrentReferences
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_SelectMC
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKP
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKI
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_SetKD
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetIdref
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCurrentReferences
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetTeref
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetMecSpeedRefUnit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetIqdref
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecTorqueRamp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ExecSpeedRamp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[190]"></a>UI_SetRevupData</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, user_interface.o(i.UI_SetRevupData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UI_SetRevupData
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseFinalTorque
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseFinalMecSpeedUnit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RUC_SetPhaseDurationms
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_ReceivedFrame
</UL>

<P><STRONG><a name="[1c0]"></a>UI_TaskInit</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, ui_task.o(i.UI_TaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UI_TaskInit &rArr; MCP_Init &rArr; MCP_WaitNextFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UFCP_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[52]"></a>USART3_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_mc_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[207]"></a>USART3_STACK_CLR</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, bsp_usart1.o(i.USART3_STACK_CLR))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Stack_Monitor
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Monitor
</UL>

<P><STRONG><a name="[209]"></a>Usart3_Data_T0_Canopen</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_usart1.o(i.Usart3_Data_T0_Canopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Usart3_Data_T0_Canopen &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Stack_Monitor
</UL>

<P><STRONG><a name="[204]"></a>Usart3_Error_Response</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_usart1.o(i.Usart3_Error_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Usart3_Error_Response &rArr; CRC16_creat &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Maxon_Sci_COM_Send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Maxon_Communicate_clr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_creat
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sci_Monitor
</UL>

<P><STRONG><a name="[215]"></a>Usart_Labview_Analyze</STRONG> (Thumb, 6788 bytes, Stack size 80 bytes, usart_labview.o(i.Usart_Labview_Analyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Usart_Labview_Analyze &rArr; DualDrv_Parameter_Download &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorParametersM2_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorParametersM1_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramSpeedRampMotor2
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_ProgramSpeedRampMotor1
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_ReadRegValue
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Switch_Motor_Operation_Mode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_EN_OFF
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualDrv_Parameter_Upload
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualDrv_Parameter_Download
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[269]"></a>Usart_ReadRegValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart_labview.o(i.Usart_ReadRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Labview_Analyze
</UL>

<P><STRONG><a name="[1e0]"></a>VBS_GetAvBusVoltage_V</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bus_voltage_sensor.o(i.VBS_GetAvBusVoltage_V))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_SafetyTask
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQD_CalcElMotorPower
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_GetReg
</UL>

<P><STRONG><a name="[26a]"></a>VSS_Clear</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Init
</UL>

<P><STRONG><a name="[1a6]"></a>VSS_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, virtual_speed_sensor.o(i.VSS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VSS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSS_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[e1]"></a>VSS_SetMecAcceleration</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, virtual_speed_sensor.o(i.VSS_SetMecAcceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VSS_SetMecAcceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[e2]"></a>VSS_SetMecAngle</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, virtual_speed_sensor.o(i.VSS_SetMecAngle))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAC_StartAlignment
</UL>

<P><STRONG><a name="[1ae]"></a>VVBS_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, virtual_bus_voltage_sensor.o(i.VVBS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[b6]"></a>_RPOD_SyncEvent</STRONG> (Thumb, 338 bytes, Stack size 88 bytes, canopen_pdo.o(i._RPOD_SyncEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _RPOD_SyncEvent &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPDO_Direct_SetODentry
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[1e]"></a>_RxPDO_EventTimers_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_pdo.o(i._RxPDO_EventTimers_Handler))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[26c]"></a>__0printf$4</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf4.o(i.__0printf$4), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[288]"></a>__1printf$4</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0printf$4), UNUSED)

<P><STRONG><a name="[bd]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf4.o(i.__0printf$4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atlas_Write_Flash
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DualDrv_Parameter_Upload
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ODCallback_t_Index1010_Subindex1
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[289]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[28a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[28b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[28c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[26e]"></a>_getODentry</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, canopen_objacces.o(i._getODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[19]"></a>_heartbeatError</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canopen_lifegrd.o(i._heartbeatError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _heartbeatError &rArr; MC_StopMotor2 &rArr; MCI_StopMotor &rArr; STM_NextState
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor2
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_StopMotor1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>_initialisation</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_nmt.o(i._initialisation))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>_operational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_nmt.o(i._operational))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>_post_SlaveStateChange</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_lifegrd.o(i._post_SlaveStateChange))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>_post_TPDO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_sync.o(i._post_TPDO))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>_post_sync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_sync.o(i._post_sync))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>_preOperational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_nmt.o(i._preOperational))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[1dc]"></a>_sendPDOevent</STRONG> (Thumb, 372 bytes, Stack size 64 bytes, canopen_pdo.o(i._sendPDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>

<P><STRONG><a name="[cb]"></a>_setODentry</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, canopen_objacces.o(i._setODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Parameter_Init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
</UL>

<P><STRONG><a name="[1d]"></a>_storeODSubIndex</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_od.o(i._storeODSubIndex))
<BR>[Address Reference Count : 1]<UL><LI> canopen_od.o(.data)
</UL>
<P><STRONG><a name="[26f]"></a>buildPDO</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, canopen_pdo.o(i.buildPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[cf]"></a>crc16</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_usart1.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_creat
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_chk
</UL>

<P><STRONG><a name="[211]"></a>emergencyInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, canopen_emcy.o(i.emergencyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = emergencyInit &rArr; RegisterSetOnDentry_Callback &rArr; OD_Index_san
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetOnDentry_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[212]"></a>emergencyStop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopen_emcy.o(i.emergencyStop))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[1f5]"></a>failedSDO</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, canopen_sdo.o(i.failedSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = failedSDO &rArr; SDO_Err_Record &rArr; SendSDO &rArr; CAN2_Send_Msg &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Err_Record
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[93]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp_debug_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf4.o(i.__0printf$4)
</UL>
<P><STRONG><a name="[20b]"></a>getElapsedTime</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, canopen_timer.o(i.getElapsedTime))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[1d2]"></a>getNodeId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, canopen_nmt.o(i.getNodeId))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_Manager_Handle
</UL>

<P><STRONG><a name="[1fa]"></a>getSDOfreeLine</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, canopen_sdo.o(i.getSDOfreeLine))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[1f6]"></a>getSDOlineOnUse</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, canopen_sdo.o(i.getSDOlineOnUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[1fe]"></a>getSDOlineRestBytes</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, canopen_sdo.o(i.getSDOlineRestBytes))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[1d7]"></a>heartbeatInit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, canopen_lifegrd.o(i.heartbeatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = heartbeatInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetOnDentry_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[1d6]"></a>heartbeatStop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, canopen_lifegrd.o(i.heartbeatStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[d3]"></a>in32abs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_app_function.o(i.in32abs))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StallCheck
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorStuckCheck
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPhaseCheck
</UL>

<P><STRONG><a name="[1fb]"></a>initSDOline</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, canopen_sdo.o(i.initSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[d2]"></a>l_abs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_app_function.o(i.l_abs))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultPhaseCheck
</UL>

<P><STRONG><a name="[213]"></a>lifeGuardInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, canopen_lifegrd.o(i.lifeGuardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lifeGuardInit &rArr; heartbeatInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[214]"></a>lifeGuardStop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, canopen_lifegrd.o(i.lifeGuardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lifeGuardStop &rArr; heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[1ff]"></a>lineToSDO</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, canopen_sdo.o(i.lineToSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lineToSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[7c]"></a>main</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = main &rArr; CANopen_Parameter_Init &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Program_Version_Init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Par_402_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DEBUG_USART_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardVersion_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Receive_IT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANopen_Parameter_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1bf]"></a>mc_lock_pins</STRONG> (Thumb, 504 bytes, Stack size 36 bytes, mc_tasks.o(i.mc_lock_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mc_lock_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_MotorControl_Init
</UL>

<P><STRONG><a name="[1fd]"></a>objdictToSDOline</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, canopen_sdo.o(i.objdictToSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = objdictToSDOline &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[1ca]"></a>proceedPDO</STRONG> (Thumb, 736 bytes, Stack size 80 bytes, canopen_pdo.o(i.proceedPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = proceedPDO &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RPDO_Direct_SetODentry
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>

<P><STRONG><a name="[1c9]"></a>proceedSYNC</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, canopen_sync.o(i.proceedSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageType_Check
</UL>

<P><STRONG><a name="[210]"></a>resetSDO</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, canopen_sdo.o(i.resetSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = resetSDO &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchCommunication_State
</UL>

<P><STRONG><a name="[1f4]"></a>resetSDOline</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, canopen_sdo.o(i.resetSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = resetSDOline &rArr; initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[1d8]"></a>sendOnePDOevent</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, canopen_pdo.o(i.sendOnePDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInhibitTimerAlarm
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
</UL>

<P><STRONG><a name="[1fc]"></a>setSDOlineRestBytes</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, canopen_sdo.o(i.setSDOlineRestBytes))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDO_Email_Handler
</UL>

<P><STRONG><a name="[20c]"></a>setTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, canopen_timer.o(i.setTimer))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[1a0]"></a>startTimers</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, pwm_common.o(i.startTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = startTimers
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCboot
</UL>

<P><STRONG><a name="[c2]"></a>swap</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_app_function.o(i.swap))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
</UL>

<P><STRONG><a name="[1e9]"></a>waitForPolarizationEnd</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, pwm_common.o(i.waitForPolarizationEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = waitForPolarizationEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_CurrentReadingCalibration
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1b5]"></a>MX_ADC1_Init</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>MX_ADC2_Init</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, main.o(i.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_InjectedConfigChannel
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>MX_GPIO_Init</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>MX_IWDG_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.MX_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1]"></a>MX_NVIC_Init</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, main.o(i.MX_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MX_NVIC_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c2]"></a>MX_TIM1_Init</STRONG> (Thumb, 290 bytes, Stack size 104 bytes, main.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>MX_TIM2_Init</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, main.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>MX_TIM4_Init</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, main.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c7]"></a>MX_TIM8_Init</STRONG> (Thumb, 284 bytes, Stack size 104 bytes, main.o(i.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MX_TIM8_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>FOC_CurrControllerM1</STRONG> (Thumb, 556 bytes, Stack size 72 bytes, mc_tasks.o(i.FOC_CurrControllerM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = FOC_CurrControllerM1 &rArr; MCM_Park &rArr; MCM_Trig_Functions
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STC_GetSpeedSensor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetInstElSpeedDpp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPD_GetElAngle
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReferenceInjection
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_SetPhaseVoltage
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMC_GetPhaseCurrents
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Controller
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Rev_Park
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Park
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCM_Clarke
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_VqdConditioning
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FF_DataProcess
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Limitation
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisVelocityPLLCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSK_HighFrequencyTask
</UL>

<P><STRONG><a name="[10b]"></a>ADC_Init</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[134]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[13a]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[13c]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[13d]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[141]"></a>TIM_SlaveTimer_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_SlaveTimer_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_SlaveTimer_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_SlaveConfigSynchro
</UL>

<P><STRONG><a name="[133]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[135]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SlaveTimer_SetConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[7f]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[82]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
<LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[80]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[81]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[83]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[84]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[144]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[14a]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[146]"></a>UART_Receive_IT</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>UART_SetConfig</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[149]"></a>UART_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[11c]"></a>FLASH_Program_Byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[11b]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[11d]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[11e]"></a>FLASH_Program_Word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[eb]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[119]"></a>FLASH_MassErase</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[115]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[114]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[117]"></a>DMA_SetConfig</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, stm32f4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[c6]"></a>CAN_Receive_IT</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.CAN_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; MessageType_Check &rArr; Net_Manager_Handle &rArr; SetState &rArr; SwitchCommunication_State &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>CAN_Transmit_IT</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_can.o(i.CAN_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[1ea]"></a>LL_TIM_OC_SetMode</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.LL_TIM_OC_SetMode))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_RLDetectionModeEnable
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R3_2_RLDetectionModeDisable
</UL>

<P><STRONG><a name="[8c]"></a>R3_2_RLGetPhaseCurrents</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLGetPhaseCurrents))
<BR>[Address Reference Count : 1]<UL><LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[8e]"></a>R3_2_RLSwitchOnPWM</STRONG> (Thumb, 174 bytes, Stack size 4 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLSwitchOnPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = R3_2_RLSwitchOnPWM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[8d]"></a>R3_2_RLTurnOnLowSides</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLTurnOnLowSides))
<BR>[Address Reference Count : 1]<UL><LI> r3_2_f4xx_pwm_curr_fdbk.o(i.R3_2_RLDetectionModeEnable)
</UL>
<P><STRONG><a name="[270]"></a>sendPdo</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, canopen_pdo.o(i.sendPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sendPdo &rArr; CAN2_Send_Msg &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>

<P><STRONG><a name="[26d]"></a>_printf_core</STRONG> (Thumb, 552 bytes, Stack size 96 bytes, printf4.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$4
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
